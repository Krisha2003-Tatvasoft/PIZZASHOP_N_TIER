@using static pizzashop.Entity.Models.Enums
@model pizzashop.Entity.ViewModels.AddItem;
<div class="modal fade" id="updateItem" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog  modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Update Menu Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <form id="edit-item-form" method="post" >
                <input type="hidden" asp-for=Itemid>
                <div class="modal-body add-item-body">

                    <div class="left-side-addItem">

                        <!-- first row -->
                        <div>
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-lg-6 col-md-6 col-sm-12 mb-3">
                                        <div class="form-floating">
                                            <select class="form-select" id="Categoryid" asp-for=Categoryid
                                                asp-items="Model.Categories">
                                                <option value="">Select Category</option>
                                            </select>
                                            <label for="Categoryid">Category</label>
                                            <span class="text-danger" asp-validation-for="Categoryid"></span>
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-6 col-sm-12 mb-3">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="floatingInput"
                                                placeholder="Name" asp-for=Itemname required>
                                            <label for="floatingInput">Name*</label>
                                             <span class="text-danger" asp-validation-for="Itemname"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- two row -->

                        <div class="container-fluid">
                            <div class="row">
                                <div class=" col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <select asp-for="itemtype" asp-items="Html.GetEnumSelectList<itemtype>()"
                                            class="form-select">
                                            <option value="">Select a type</option>
                                        </select>
                                        <label for="floatingInput">Item Type*</label>
                                          <span class="text-danger" asp-validation-for="itemtype"></span>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6  col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <input type="text" class="form-control" id="floatingInput" placeholder="Rate"
                                            required asp-for=Rate>
                                        <label for="floatingInput">Rate*</label>
                                          <span class="text-danger" asp-validation-for="Rate"></span>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <input type="text" class="form-control" id="floatingInput"
                                            placeholder="Quantity" required asp-for=Quantity>
                                        <label for="floatingInput">Quantity*</label>
                                         <span class="text-danger" asp-validation-for="Quantity"></span>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <select class="form-select" id="Unitid floatingSelect" asp-for=Unitid
                                            asp-items="Model.Units">
                                            <option value="">Select Unit</option>
                                        </select>
                                        <label for="Unitid">Unit</label>
                                         <span class="text-danger" asp-validation-for="Unitid"></span>
                                    </div>
                                </div>

                            </div>
                        </div>

                        <!-- three row -->

                        <div class="container-fluid">
                            <div class="row">
                                <div
                                    class=" col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3 d-flex align-items-center">
                                    <div class="form-check form-switch d-flex gap-2 align-items-center">
                                        <input class="form-check-input" type="checkbox" role="switch" id="isAvailable"
                                            asp-for=Isavailable>
                                        <label class="form-check-label" for="isAvailable">Available</label>
                                    </div>
                                </div>

                                <div
                                    class="col-xxl-3 col-lg-6 col-md-6  col-sm-6 col-12 mb-3 d-flex align-items-center">
                                    <div
                                        class="form-check form-switch d-flex gap-2 align-items-center justify-content-start">
                                        <input class="form-check-input" type="checkbox" id="IsDefaultTax" role="switch"
                                            asp-for=Isdefaulttax>
                                        <label class="form-check-label text-secondary"
                                            for="IsDefaultTax">DefaultTax</label>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <input type="text" class="form-control" id="floatingInput"
                                            placeholder="Tax Percentage" asp-for=Taxpercentage>
                                        <label for="floatingInput">Tax Percentage</label>
                                        <span class="text-danger" asp-validation-for="Taxpercentage"></span>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <input type="text" class="form-control" id="floatingInput" asp-for=Shortcode
                                            placeholder="Short Code">
                                        <label for="floatingInput">Short Code</label>
                                           <span class="text-danger" asp-validation-for="Shortcode"></span>
                                    </div>
                                </div>

                            </div>
                        </div>


                        <div class="container-fluid form-floating mb-3">
                            <textarea class="form-control" placeholder="Give Description of this Item"
                                id="floatingTextarea2" style="height: 100px" asp-for=Description></textarea>
                            <label for="floatingTextarea2">Description</label>
                             <span class="text-danger" asp-validation-for="Description"></span>
                        </div>


                        @* <div class="container-fluid">
                            <span>Upload Image</span>
                            <div class="input-group d-flex justify-content-center align-items-center file-upload p-4">
                                <!-- Button to trigger the file input -->
                                <button type="button" class="btn d-flex align-items-center gap-2"
                                    id="inputGroupFileAddon04"
                                    onclick="document.getElementById('inputGroupFile01').click();">
                                    <img class="upload-icon" src="../images/cloud-arrow-up.svg" alt="Upload" />
                                    <div>
                                        Drag and Drop Or Browse files
                                    </div>
                                </button>

                                <!-- Hidden file input -->
                                <input type="file" class="form-control" id="inputGroupFile01" style="display: none;" asp-for="ItemPicture"
                                    aria-describedby="fileNameDisplay"
                                    onchange="this.nextElementSibling.textContent = this.files.length > 0 ? this.files[0].name : 'No file selected';">

                            </div>

                        </div> *@


               
        <div class="container-fluid mb-3">

            <div class="col-12 mb-3 border border-2 rounded-3" style="border-style: dashed!important;">

                <div class="d-flex align-items-center justify-content-center p-3 rounded flex-column"
                    style="width: 100%;">
                    <div class="d-flex flex-row">
                        <!-- Image Preview (Initially Visible if Image Exists) -->
                        <img id="imagePreview" class="rounded mb-2"
                            style="border: 1px solid #ddd; height: 100px; display: none;">
                    </div>

                    <div class="align-self-center">
                        <div id="upload-icon" onclick="document.getElementById('fileInput').click()"
                            style="cursor: pointer;">
                            <i class="bi bi-cloud-arrow-up display-4 ps-2"></i>
                        </div>
                        <div class="d-flex flex-row">
                            <!-- File Name -->
                            <span id="file-name" class="text-secondary text-truncate"
                                style="max-width: 150px; cursor: pointer;"
                                onclick="document.getElementById('fileInput').click()">Browse File</span>

                            <!-- Delete Icon (Initially Visible if Image Exists) -->
                            <i class="bi bi-trash text-danger ps-2" id="deleteFile"
                                style="cursor: pointer; display: none;" onclick="removeFile()"></i>

                            <input type="hidden" id="existingImagePath" name="Itemimg" asp-for="Itemimg" />
                        </div>
                    </div>

                    <!-- Hidden File Input -->
                    <input type="file" id="fileInput" name="ItemPicture" accept="image/*" style="display: none;"
                        onchange="previewFile(event) ">
                </div>
            </div>

        </div>



                </div>

                    <div class="right-side-addItem">
                        <div class="right-side-content p-2">
                            <div class="container-fluid mt-2">
                            <select class="form-select" id="MGid" asp-items="Model.MGList">
                                <option selected val="">Select Modifiers Groups(s)</option>
                            </select>
                            <div id="modifierContainer" class="mt-3">

                                @foreach (var group in Model.ModifierGroups)
                                {
                                    <div id="group_@group.Modifiergroupid" class="modifier-group">
                                        <input type="hidden" class="modifier-group-id"
                                            value="@group.Modifiergroupid" />
                                        <div class="d-flex justify-content-between align-items-center">
                                            <h6>@group.Modifiername</h6>
                                            <button class="delete-group" style="border:none; background:none;"
                                                data-group="@group.Modifiergroupid">
                                                <img src="../images/trash.svg">
                                            </button>
                                        </div>

                                        <!-- Min & Max Selection -->
                                        <div class="d-flex gap-2 mt-1 mb-1 align-items-center w-100">
                                            <div class="flex-fill">
                                                <select class="form-select min-selection ex-min" id="min_@group.Modifiergroupid" asp-for="@group.Minselectionrequired">
        
                                                   @foreach (var i in Enumerable.Range(1, @group.modifiers.Count() + 1)) {
                                                    <option value="@i" selected="@(i == @group.Minselectionrequired ? "selected" : null)">@i</option>
                                                       }

                                                </select>
                                                
                                            </div>
                                            <div class="flex-fill">
                                                <select class="form-select max-selection" id="max_@group.Modifiergroupid" asp-for="@group.Maxselectionallowed">
        @foreach (var i in Enumerable.Range(
            @group.Maxselectionallowed.HasValue ? (int)@group.Maxselectionallowed.Value : 1, 
            @group.modifiers.Count() - (@group.Maxselectionallowed.HasValue ? (int)@group.Maxselectionallowed.Value : 1) + 1))
        {
            <option value="@i" selected="@(i == @group.Maxselectionallowed ? "selected" : null)">@i</option>
        }
    </select>
                                            </div>
                                        </div>

                                        <!-- Modifier List -->
                                        <ul>
                                            @foreach (var modifier in group.modifiers)
                                            {
                                                <li>
                                                    <div class="d-flex align-items-center justify-content-between">
                                                <div>@modifier.Modifiername</div>
                                                <div>@modifier.Rate</div>
                                                     </div>
                                                 </li>
                                            }
                                        </ul>
                                    </div>
                                }

                            </div>

                            </div>
                        </div>  
                    </div>


             </div>

                <div class="modal-footer d-flex justify-content-end gap-2">
                    <button type="button" class="btn btn-primary" id="edit-item" >Save</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                </div>

            </form>

        </div>
    </div>
</div>

<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

<script>
    $(document).ready(function () {
        var modifierIndex = 0;
         
        $("#MGid").change(function () {

            var groupId = $(this).val();
            var groupText = $("#MGid option:selected").text();
            var itemId = $("#Itemid").val();

            // Check if the group is already in the list
            if (groupId && $("#group_" + groupId).length === 0) {
                $.ajax({
                    url: "/Menu/modifierList",
                    type: "GET",
                    data: { id: groupId },
                    success: function (data) {

                        var currentIndex = modifierIndex++;
                        var modifierCount = data.length;



                        var modifierList = `<div id="group_${groupId}" class="modifier-group">

                        <input type="hidden" class="modifier-group-id" value="${groupId}" />

                        <div class="d-flex justify-content-between align-items-center">
                         <h6>${groupText} </h6>
                        <button class="delete-group" style="border:none; background:none;" data-group="${groupId}">
                        <img  src="../images/trash.svg"></button>
                        </div>

 
                       <div class="d-flex gap-2 mt-1 mb-1 align-items-center w-100">
                       <div class="flex-fill">
                        <select class="form-select min-selection" id="min_${groupId}"  style="border-radius:25px;">
                             ${generateOptions(modifierCount)}  
                        </select>
                       </div>
                       <div class="flex-fill">
                        <select class="form-select max-selection" id="max_${groupId}" style="border-radius:25px;" >
                             ${generateOptions(modifierCount)}  
                        </select>
                       </div>
                       </div>
                      
                        
                        <ul>`;

                        // Append all modifiers inside the group
                        data.forEach(modifier => {
                            modifierList += `<li><div class="d-flex align-items-center justify-content-between">
                            <div>${modifier.modifiername}</div>
                            <div>${modifier.rate}</div>
                            </div>
                            </li>`;
                        });

                        modifierList += "</ul></div>";

                        // Append to container
                        $("#modifierContainer").append(modifierList);
                       adjustSelectionLimits(groupId, modifierCount); 
                    },
                    error: function (xhr) {
                        alert(xhr.responseJSON.message || "Failed to load modifiers.");
                    }
                });
            }
        });

        function generateOptions(modifierCount) {
        let options = '';
        for (let i = 1; i <= modifierCount; i++) {
            options += `<option value="${i}">${i}</option>`;
        }
        return options;
    }

       // Adjust selection limits (min and max values) based on the number of modifiers
    function adjustSelectionLimits(groupIndex, modifierCount) {
       
    const minSelect = $(`#min_${groupIndex}`);
    const maxSelect = $(`#max_${groupIndex}`);


    // Generate options dynamically
    function generateOptions(modifierCount) {
        let options = '';
        for (let i = 1; i <= modifierCount; i++) {
            options += `<option value="${i}">${i}</option>`;
        }
        return options;
    }

       // Initial population of max selection options
    const minValue = parseInt(minSelect.val()) || 1; // Default to 1 if invalid
    
    maxSelect.empty();
    maxSelect.append(generateOptions(modifierCount)); // Populate maxSelect with all options initially

    // Ensure max value is at least equal to min value
    const maxValue = parseInt(maxSelect.val()) || minValue;
    if (maxValue < minValue) {
        maxSelect.val(minValue); // Ensure max is at least equal to min
    }

       maxSelect.find('option').each(function () {
            if (parseInt($(this).val()) < minValue) {
                $(this).remove(); // Remove options smaller than min value
            }
        });
        

      // Update max options when min selection changes
    minSelect.on('change', function () {

        const newMinValue = parseInt($(this).val()) || 1;
        maxSelect.empty(); // Clear the current max options
        maxSelect.append(generateOptions(modifierCount)); // Re-populate max options based on modifierCount
        
        // Remove options that are less than the new min value
        maxSelect.find('option').each(function () {
            if (parseInt($(this).val()) < newMinValue) {
                $(this).remove(); // Remove options smaller than min value
            }
        });

        const selectedMaxValue = parseInt(maxSelect.val());
        if (selectedMaxValue < newMinValue) {
            maxSelect.val(newMinValue); // Adjust max to not be less than min
        }
    });


         // Update min selection when max value is changed
     maxSelect.on('change', function () {
        const selectedMinValue = parseInt(minSelect.val()) || 1;
        const selectedMaxValue = parseInt($(this).val()) || selectedMinValue;
        if (selectedMaxValue < selectedMinValue) {
            $(this).val(selectedMinValue); // Ensure max is at least equal to min
        }
    });

    }
         // Update max options when min selection changes
       $(".ex-min").on('change', function () {
        const groupId = $(this).closest('.modifier-group').find('.modifier-group-id').val();
        const modifierCount = $(this).closest('.modifier-group').find('ul li').length;
        adjustSelectionLimits(groupId, modifierCount); // Call the function to adjust limits
    });

    

        // Remove Selected Modifier Group
        $(document).on("click", ".delete-group", function () {
            var groupId = $(this).data("group");
            $(`#group_${groupId}`).remove(); // Remove from UI
        });



      

    });

</script>


@* item image *@

<script>


    function previewFile(event) {
        const fileInput = document.getElementById('fileInput');
        const uploadIcon = document.getElementById('upload-icon');
        const fileNameSpan = document.getElementById('file-name');
        const imagePreview = document.getElementById('imagePreview');
        const deleteFile = document.getElementById('deleteFile');

        if (fileInput.files && fileInput.files[0]) {
            const file = fileInput.files[0];
            const reader = new FileReader();

            reader.onload = function (e) {
                imagePreview.src = e.target.result;
                imagePreview.style.display = "block"; // Show image
                uploadIcon.style.display = "none"; // Hide upload icon
                fileNameSpan.textContent = file.name; // Show file name
                deleteFile.style.display = "block"; // Show delete icon
            };

            reader.readAsDataURL(file);
        }
    }

    function removeFile() {
        const fileInput = document.getElementById('fileInput');
        const uploadIcon = document.getElementById('upload-icon');
        const fileNameSpan = document.getElementById('file-name');
        const imagePreview = document.getElementById('imagePreview');
        const deleteFile = document.getElementById('deleteFile');
        const existingImagePath = document.getElementById('existingImagePath'); // Add this line

        fileInput.value = ""; // Clear file input
        uploadIcon.style.display = "block"; // Show upload icon again
        fileNameSpan.textContent = "Browse File"; // Reset text
        imagePreview.src = "";
        imagePreview.style.display = "none"; // Hide image
        deleteFile.style.display = "none"; // Hide delete icon

        // Clear the hidden input for existing image path
        if (existingImagePath) { // Check if the element exists
            existingImagePath.value = ""; // Clear the existing image path
        }
    }

    function loadExistingImage(imageUrl) {
        console.log("load existing image");
        const imagePreview = document.getElementById('imagePreview');
        const uploadIcon = document.getElementById('upload-icon');
        const fileNameSpan = document.getElementById('file-name');
        const deleteFile = document.getElementById('deleteFile');

        if (imageUrl) {
            imagePreview.src = imageUrl;
            imagePreview.style.display = "block"; // Show image
            uploadIcon.style.display = "none"; // Hide upload icon
            fileNameSpan.textContent = "Current Image"; // Set default text
            deleteFile.style.display = "block"; // Show delete icon
        }
    }

    // Load the existing image from Model.UserProfile
     function existing() {
        const existingImage = "@Model.Itemimg"; // Get image from Model
        if (existingImage && existingImage !== "null" && existingImage.trim() !== "") {
            loadExistingImage(existingImage);
        }
    };

    existing();


</script>

