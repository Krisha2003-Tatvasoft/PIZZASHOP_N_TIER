@using static pizzashop.Entity.Models.Enums
@model pizzashop.Entity.ViewModels.AddItem;

<div class="modal fade" id="addItem" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog  modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Add New Menu Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <form id="add-item-form">

                <div class="modal-body add-item-body">
                    <div class="left-side-addItem ">

                        <input type="hidden" asp-for="Itemid" id="Itemid" value="@Model.Itemid" />

                        <!-- first row -->
                        <div>
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-lg-6 col-md-6 col-sm-12 mb-3">
                                        <div class="form-floating">
                                            <select class="form-select" id="Categoryid"
                                                asp-for=Categoryid asp-items="Model.Categories">
                                                <option value="">Select Category</option>
                                            </select>
                                            <label for="Categoryid">Category*</label>
                                            <span class="text-danger" asp-validation-for="Categoryid"></span>
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-6 col-sm-12 mb-3">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="floatingInput"
                                                placeholder="Name" asp-for=Itemname required>
                                            <label for="floatingInput">Name*</label>
                                            <span class="text-danger" asp-validation-for="Itemname"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- two row -->

                        <div class="container-fluid">
                            <div class="row">
                                <div class=" col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <select asp-for="itemtype" asp-items="Html.GetEnumSelectList<itemtype>()"
                                            class="form-select">
                                            <option value="">Select a type</option>
                                        </select>
                                        <label for="floatingInput">Item Type*</label>
                                        <span class="text-danger" asp-validation-for="itemtype"></span>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6  col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <input type="text" class="form-control" id="floatingInput" placeholder="Rate"
                                            required asp-for=Rate>
                                        <label for="floatingInput">Rate*</label>
                                        <span class="text-danger" asp-validation-for="Rate"></span>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <input type="text" class="form-control" id="floatingInput"
                                            placeholder="Quantity" required value="0" asp-for=Quantity>
                                        <label for="floatingInput">Quantity*</label>
                                        <span class="text-danger" asp-validation-for="Quantity"></span>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <select class="form-select" id="Unitid floatingSelect" asp-for=Unitid
                                            asp-items="Model.Units">
                                            <option value="">Select Unit</option>
                                        </select>
                                        <label for="Unitid">Unit</label>
                                        <span class="text-danger" asp-validation-for="Unitid"></span>
                                    </div>

                                </div>

                            </div>
                        </div>

                        <!-- three row -->

                        <div class="container-fluid">
                            <div class="row">
                                <div
                                    class=" col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3 d-flex align-items-center">
                                    <div class="form-check form-switch d-flex gap-2 align-items-center">
                                        <input class="form-check-input" type="checkbox" role="switch" id="isAvailable"
                                            asp-for=Isavailable>
                                        <label class="form-check-label" for="isAvailable">Available</label>
                                    </div>
                                </div>

                                <div
                                    class="col-xxl-3 col-lg-6 col-md-6  col-sm-6 col-12 mb-3 d-flex align-items-center">
                                    <div
                                        class="form-check form-switch d-flex gap-2 align-items-center justify-content-start">
                                        <input class="form-check-input" type="checkbox" role="switch"
                                            asp-for=Isdefaulttax id="IsDefaultTax">
                                        <label class="form-check-label" for="IsDefaultTax">DefaultTax</label>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <input type="text" class="form-control" id="floatingInput"
                                            placeholder="Tax Percentage" asp-for=Taxpercentage>
                                        <label for="floatingInput">Tax Percentage</label>
                                        <span class="text-danger" asp-validation-for="Taxpercentage"></span>
                                    </div>
                                </div>

                                <div class="col-xxl-3 col-lg-6 col-md-6 col-sm-6 col-12 mb-3">
                                    <div class="form-floating">
                                        <input type="text" class="form-control" id="floatingInput"
                                            placeholder="Short Code" asp-for=Shortcode>
                                        <label for="floatingInput">Short Code</label>
                                        <span class="text-danger" asp-validation-for="Shortcode"></span>
                                    </div>
                                </div>

                            </div>
                        </div>


                        <div class="container-fluid form-floating mb-3">
                            <textarea class="form-control" placeholder="Give Description of this Item"
                                id="floatingTextarea2" style="height: 100px" asp-for=Description></textarea>
                            <label for="floatingTextarea2">Description</label>
                            <span class="text-danger" asp-validation-for="Description"></span>
                        </div>


                

                        <div class="container-fluid mb-3">
        <div class="d-flex align-items-center justify-content-center p-3 rounded flex-column pb-3"
            style="width: 100%;border-style: dashed;border:1px dashed #b3b3b3 ">
            <div class="d-flex flex-row"><!-- Image Preview (Initially Hidden) -->
                <img id="imagePreview" class="rounded mb-2" style=" display: none; border: 1px solid #ddd;"
                    height="100px">
            </div>


            <!-- Upload Icon (Initially Visible) -->
            <div class="d-flex flex-row align-items-center gap-2">
                <div id="upload-icon" onclick="document.getElementById('fileInput').click()" style="cursor: pointer;">
                    <i class="bi bi-cloud-arrow-up display-6 ps-2"></i>
                </div>

                <div class="d-flex flex-row">
                    <!-- File Name (Initially 'Browse File') -->
                    <span id="file-name" class="text-secondary text-truncate" style="max-width: 250px;">Drag and Drop Or Browse files</span>

                       @* edit *@
                        <i class="bi bi-pencil ps-2" style="cursor: pointer; display: none;"
                             onclick="document.getElementById('fileInput').click()" id="editFile"></i>


                    <i class="bi bi-trash text-danger ps-2" id="deleteFile" style="cursor: pointer; display: none;"
                        onclick="removeFile()"></i>
                </div>
            </div>
            <!-- Hidden File Input -->
            <input type="file" id="fileInput" name="ItemPicture" accept="image/*" style="display: none;"
                onchange="previewFile(event)">
        </div>
 </div>

                    </div>
                <div class="right-side-addItem"> 
                    <div class="right-side-content p-2">
                        <div class="mt-2">
                            <select class="form-select" id="MGid" asp-items="Model.MGList">
                                <option selected val="">Select Modifiers Groups(s)</option>
                            </select>
                            

                            <div id="modifierContainer" class="mt-3 ">
                            </div>
                        </div>
                    </div>
                </div>

                </div>

                <div class="modal-footer d-flex justify-content-end gap-2">
                    <button type="button" class="btn btn-primary" id="add-item">Save</button>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                </div>

            </form>

        </div>
    </div>
</div>

<script src="~/js/script.js"></script>
<script src="../js/bootstarp.bundle.min.js"></script>
<script>
    $(document).ready(function () {
        var modifierIndex = 0;

        $("#MGid").change(function () {

            var groupId = $(this).val();
            var groupText = $("#MGid option:selected").text();
            var itemId = $("#Itemid").val();

            // Check if the group is already in the list
            if (groupId && $("#group_" + groupId).length === 0) {
                $.ajax({
                    url: "/Menu/modifierList",
                    type: "GET",
                    data: { id: groupId },
                    success: function (data) {
                       

                        var currentIndex = modifierIndex++;
                         var modifierCount = data.length;  // Get the number of modifiers



                        var modifierList = `<div id="group_${groupId}" class="modifier-group">

                        <input type="hidden" class="modifier-group-id" name="ModifierGroups[${currentIndex}].Modifiergroupid" value="${groupId}" />

                        <div class="d-flex justify-content-between align-items-center">
                         <h6>${groupText} </h6>
                        <button class="delete-group" style="border:none; background:none;" data-group="${groupId}">
                        <img  src="../images/trash.svg"></button>
                        </div>


                       <div class="d-flex gap-2 mt-1 mb-1 align-items-center w-100">
                       <div class="flex-fill">
                        <select class="form-select min-selection" id="min_${groupId}"  name="ModifierGroups[${currentIndex}].Minselectionrequired" style="border-radius:25px;">
                             ${generateOptions(modifierCount)} 
                        </select>
                       </div>
                       <div class="flex-fill">
                        <select class="form-select max-selection" id="max_${groupId}" style="border-radius:25px;" name="ModifierGroups[${currentIndex}].Maxselectionallowed">
                              ${generateOptions(modifierCount)}  
                        </select>
                       </div>
                       </div>
                      
                        
                        <ul>`;

                       
                         
                        // Append all modifiers inside the group
                        data.forEach(modifier => {
                            modifierList += `<li><div class="d-flex align-items-center justify-content-between">
                            <div>${modifier.modifiername}</div>
                            <div>${modifier.rate}</div>
                            </div>
                            </li>`;
                        });

                        modifierList += "</ul></div>";

                        // Append to container
                        $("#modifierContainer").append(modifierList);
                        updateModifierGroupIndexes();
                        adjustSelectionLimits(groupId, modifierCount); 
                    },
                    error: function (xhr) {
                        alert(xhr.responseJSON.message || "Failed to load modifiers.");
                    }
                });
            }
        });

      
   
    
        function updateModifierGroupIndexes() {
            $(".modifier-group").each(function (index) {
                $(this).find(".modifier-group-id").attr("name", `ModifierGroups[${index}].Modifiergroupid`);
                $(this).find(".min-selection").attr("name", `ModifierGroups[${index}].Minselectionrequired`);
                $(this).find(".max-selection").attr("name", `ModifierGroups[${index}].Maxselectionallowed`);
            });
        }


        // Function to generate the options dynamically from 1 to the modifierCount
    function generateOptions(modifierCount) {
        let options = '';
        for (let i = 1; i <= modifierCount; i++) {
            options += `<option value="${i}">${i}</option>`;
        }
        return options;
    }

        // Adjust selection limits (min and max values) based on the number of modifiers
    function adjustSelectionLimits(groupIndex, modifierCount) {
       
    const minSelect = $(`#min_${groupIndex}`);
    const maxSelect = $(`#max_${groupIndex}`);

    // Generate options dynamically
    function generateOptions(modifierCount) {
        let options = '';
        for (let i = 1; i <= modifierCount; i++) {
            options += `<option value="${i}">${i}</option>`;
        }
        return options;
    }

       // Initial population of max selection options
    const minValue = parseInt(minSelect.val()) || 1; // Default to 1 if invalid
    maxSelect.empty();
    maxSelect.append(generateOptions(modifierCount)); // Populate maxSelect with all options initially

    // Ensure max value is at least equal to min value
    const maxValue = parseInt(maxSelect.val()) || minValue;
    if (maxValue < minValue) {
        maxSelect.val(minValue); // Ensure max is at least equal to min
    }

      // Update max options when min selection changes
    minSelect.on('change', function () {
       
        const newMinValue = parseInt($(this).val()) || 1;
        maxSelect.empty(); // Clear the current max options
        maxSelect.append(generateOptions(modifierCount)); // Re-populate max options based on modifierCount
        
        // Remove options that are less than the new min value
        maxSelect.find('option').each(function () {
            if (parseInt($(this).val()) < newMinValue) {
                $(this).remove(); // Remove options smaller than min value
            }
        });

        const selectedMaxValue = parseInt(maxSelect.val());
        if (selectedMaxValue < newMinValue) {
            maxSelect.val(newMinValue); // Adjust max to not be less than min
        }
    });


         // Update min selection when max value is changed
     maxSelect.on('change', function () {
        const selectedMinValue = parseInt(minSelect.val()) || 1;
        const selectedMaxValue = parseInt($(this).val()) || selectedMinValue;
        if (selectedMaxValue < selectedMinValue) {
            $(this).val(selectedMinValue); // Ensure max is at least equal to min
        }
    });

    }
     
        // Remove Selected Modifier Group
        $(document).on("click", ".delete-group", function () {
            var groupId = $(this).data("group");
            $(`#group_${groupId}`).remove(); // Remove from UI
            $("#MGid").val(""); // Reset the select box
            updateModifierGroupIndexes();
        });
    });

</script>


@* add image *@

<script>


    function previewFile(event) {
        const fileInput = document.getElementById('fileInput');
        const uploadIcon = document.getElementById('upload-icon');
        const fileNameSpan = document.getElementById('file-name');
        const imagePreview = document.getElementById('imagePreview');
        const deleteFile = document.getElementById('deleteFile');
          const editFile = document.getElementById('editFile');

        if (fileInput.files && fileInput.files[0]) {
            const file = fileInput.files[0];
            const reader = new FileReader();

            reader.onload = function (e) {
                imagePreview.src = e.target.result;
                imagePreview.style.display = "block"; // Show image
                uploadIcon.style.display = "none"; // Hide upload icon
                fileNameSpan.textContent = file.name; // Set file name
                deleteFile.style.display = "block"; // Show delete icon
                  editFile.style.display = "block"; // Show edit icon
            };

            reader.readAsDataURL(file);
        }
    }

    function removeFile() {
        const fileInput = document.getElementById('fileInput');
        const uploadIcon = document.getElementById('upload-icon');
        const fileNameSpan = document.getElementById('file-name');
        const imagePreview = document.getElementById('imagePreview');
        const deleteFile = document.getElementById('deleteFile');
        const editFile = document.getElementById('editFile');


        fileInput.value = ""; // Clear input
        uploadIcon.style.display = "block"; // Show upload icon again
        fileNameSpan.textContent = "Browse File"; // Reset text
        imagePreview.src = "";
        imagePreview.style.display = "none"; // Hide image
        deleteFile.style.display = "none"; // Hide delete icon
        editFile.style.display = "none"; // Hide edit icon
    }

</script>

<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>