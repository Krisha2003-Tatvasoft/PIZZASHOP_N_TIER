@using Newtonsoft.Json
@using pizzashop.Entity.ViewModels
@{
    ViewData["Title"] = "Menu Page";
}

@{
    var permissionCookie = Context.Request.Cookies["PermissionData"];
    var permissionModel = string.IsNullOrEmpty(permissionCookie)
    ? new PermissionRequest()
    : JsonConvert.DeserializeObject<PermissionRequest>(permissionCookie);

    var menuPermission = permissionModel?.Permissions?.FirstOrDefault(p => p.Moduleid == 3);
}


@model pizzashop.Entity.ViewModels.Category;

<link rel="stylesheet" href="~/css/Menu.css" />

<div class="w-100 main-content px-4">

    <div class="heading-text py-2">
        <h1><b>Menu</b></h1>
    </div>

    <div class="items-modifiers">
        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <button class="nav-link active" id="nav-tab1" data-bs-toggle="tab" data-bs-target="#tab1" type="button"
                    role="tab" aria-controls="tab1" aria-selected="true">
                    <div class="tab">
                        <img class=tab-svg src="../images/list-check.svg" /><span class="tab-name">
                            Items</span>
                    </div>
                </button>
                <button class="nav-link" id="nav-tab2" data-bs-toggle="tab" data-bs-target="#tab2" type="button"
                    role="tab" aria-controls="tab2" aria-selected="false">
                    <div class="tab">
                        <img class=tab-svg src="../images/ui-checks-grid.svg" /><span class="tab-name">
                            Modifiers</span>
                    </div>
                </button>
            </div>
        </nav>

        <div class="tab-content w-100" id="nav-tabContent">

            <div class="tab-pane fade show active " id="tab1" role="tabpanel" aria-labelledby="nav-tab1">

                <div class="d-flex items">

                    <div class="menu-slider collapse d-xl-block" id="categorySlider">


                        <div class="mb-4 d-flex justify-content-between">
                            <div class="slider-heading-text">
                                <b>Category</b>
                            </div>

                            <button class="plus-button button" data-bs-toggle="modal" data-bs-target="#addNewCategory"
                                class="delet-btn">
                                <img class="plus-img" src="../images/plus-lg.svg" alt="" class="">
                            </button>
                        </div>

                        <div id="category-list"></div>

                    </div>

                    <div id="overlay1" class="overlay1"></div>

                    <div class="menu-table w-100">


                        <div class="menu-table-heading-text mb-2 mt-2 ms-3 d-flex gap-2 justify-content-start">


                            <button class="navbar-toggler d-block d-xl-none" type="button" data-bs-toggle="collapse"
                                data-bs-target="#categorySlider" aria-controls="categorySlider" aria-expanded="false"
                                aria-label="Toggle navigation">
                                <img src="../images/list (1).svg" width="25px" height="25px" alt="Menu Icon"
                                    class="menu-icon">
                            </button>


                            <h3><b>Items</b></h3>
                        </div>
                        <div class="button-input mb-2 me-3">

                            <div class="search-field position-relative">
                                <input class="search form-control me-2 border-0" id="searchInput" type="search"
                                    placeholder="Search" aria-label="Search">
                                <i class="bi bi-search custom-icon"></i>
                            </div>


                            @if (menuPermission.Candelete == true)
                            {
                                <button id="delete-selected-item" class="button" data-bs-toggle="modal"
                                    data-bs-target="#deleteSelectedItem" class="delet-btn">
                                    <image class="delet-icon" src="../images/trash.svg" />
                                </button>
                            }

                            @if (menuPermission.Canaddedit == true)
                            {
                                <button class="new-item-btn button openModel">
                                    <i class="bi bi-plus"></i><span class="d-none d-sm-inline">New Item</span>
                                </button>
                            }

                        </div>

                        <div id="item-table"></div>

                    </div>

                </div>

            </div>


            <div class="tab-pane fade" id="tab2" role="tabpanel" aria-labelledby="nav-tab2">

                <div class="d-flex items">

                    <div class="menu-slider collapse d-xl-block" id="modifierSlider">


                        <div class="mb-4 d-flex justify-content-between">
                            <div class="slider-heading-text">
                                <b>Modifiers Group</b>
                            </div>
                            <button class="plus-button button delet-btn" id="openMGModel">
                                <img class="plus-img" src="../images/plus-lg.svg" alt="" class="">
                            </button>
                        </div>

                        <div id="Modifiers-group"></div>

                    </div>



                    <div id="overlay2" class="overlay1"></div>

                    <div class="menu-table w-100">


                        <div class="menu-table-heading-text mb-2 mt-2 ms-3 d-flex gap-2 justify-content-start">


                            <button class="navbar-toggler d-block d-xl-none" type="button" data-bs-toggle="collapse"
                                data-bs-target="#modifierSlider" aria-controls="modifierSlider" aria-expanded="false"
                                aria-label="Toggle navigation">
                                <img src="../images/list (1).svg" width="25px" height="25px" alt="Menu Icon"
                                    class="menu-icon">
                            </button>

                            <h3><b>Modifiers</b></h3>
                        </div>

                        <div class="button-input mb-2 me-3">

                            <div class="search-field position-relative">
                                <input class="search form-control me-2 border-0" type="search" id="searchModifier"
                                    placeholder="Search" aria-label="Search">
                                <i class="bi bi-search custom-icon"></i>
                            </div>

                            @if (menuPermission.Candelete == true)
                            {
                                <button id="delete-selected-modifiers" data-bs-toggle="modal"
                                    data-bs-target="#deleteSelectedModifier" class=" button delet-btn ">
                                    <image class="delet-icon " src="../images/trash.svg" />
                                </button>
                            }

                            @if (menuPermission.Canaddedit == true)
                            {
                                <button class=" button new-Modifiers-btn openModifierModel">
                                    <i class="bi bi-plus"></i><span class="d-none d-sm-inline">New Modifier</span>
                                </button>
                            }

                        </div>

                        <div id="modifier-table"></div>


                    </div>

                </div>

            </div>

        </div>

    </div>

</div>


<!-- Add Category -->
<div class="modal fade modal-addNewCategory" id="addNewCategory" tabindex="-1" aria-labelledby="AddNewCategory"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Add Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addCat">
                <div class="modal-body ">

                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="floatingInput" placeholder="Category name"
                            asp-for="Categoryname" required>
                        <label for="floatingInput">Name*</label>
                        <span class="text-danger" asp-validation-for="Categoryname"></span>
                    </div>

                    <div class="form-floating">
                        <textarea class="form-control" placeholder="Add a Description of Xategory" id="floatingTextarea"
                            asp-for="Description"></textarea>
                        <label for="floatingTextarea">Description</label>
                        <span class="text-danger" asp-validation-for="Description"></span>
                    </div>

                </div>
                <div class="modal-footer">
                    <a id="save-cat">
                        <button type="button" class="save-button btn btn-primary sav-btn">Save</button>
                    </a>
                    <button type="button" data-bs-dismiss="modal" class="btn btn-danger">Cancel</button>
                </div>
            </form>

        </div>
    </div>
</div>

<!-- Edit Category -->
<div class="modal fade modal-addNewCategory" id="editNewCategory" tabindex="-1" aria-labelledby="AddNewCategory"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Edit Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">

                <form id="editCat">
                    <input type="hidden" id="categoryid" name="categoryid">
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="Categoryname" placeholder="Category name"
                            asp-for="Categoryname" name="Categoryname" required>
                        <label for="categoryname">Name*</label>
                        <span class="text-danger" asp-validation-for="Categoryname"></span>
                    </div>

                    <div class="form-floating">
                        <textarea class="form-control" id="Description" placeholder="Add a Description of Category"
                            name="Description" asp-for="Description"></textarea>
                        <label for="description">Description</label>
                        <span class="text-danger" asp-validation-for="Description"></span>
                    </div>
                    <div class="modal-footer ">
                        <a id="save-edit-cat">
                            <button type="button" class="btn btn-primary">Save</button>
                        </a>
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>

<!--delete Category modal -->
<div class="modal fade modal-delete" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column align-items-center justify-content-center">
                <img src="../images/warning-icon.svg" alt="" width="50px" height="50px"><br>
                <span>Are you sure you want to delete this Category?</span>
            </div>
            <input type="hidden" id="hidden" value="">
            <div class="modal-footer d-flex justify-content-center gap-2">
                <a class="delete-cat">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">YES</button>
                </a>
                <button type="button" class="btn btn-danger">NO</button>
            </div>
        </div>
    </div>
</div>

<!-- Add new item -->
<div class="modal-addNewItem"></div>

<!-- delete selected Items -->
<div class="modal fade modal-delete" id="deleteSelectedItem" tabindex="-1" a ria-labelledby="deleteModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column align-items-center justify-content-center">
                <img src="../images/warning-icon.svg" alt="" width="50px" height="50px"><br>
                <span>Are you sure you want to delete these Items?</span>
            </div>
            <div class="modal-footer d-flex justify-content-center gap-2">
                <button type="button" class="btn btn-primary delete-selected-yes" data-bs-dismiss="modal">YES</button>
                <button type="button" class="btn btn-danger">NO</button>
            </div>
        </div>
    </div>
</div>

<!-- add new modifier -->
<div class="modal-addNewModifier"></div>

<!-- delete selected modifiers -->
<div class="modal fade modal-delete" id="deleteSelectedModifier" tabindex="-1" aria-labelledby="deleteSelectedModifier"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <input type="hidden" id="selectMG" value="">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteSelectedModifier">Delete Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column align-items-center justify-content-center">
                <img src="../images/warning-icon.svg" alt="" width="50px" height="50px"><br>
                <span>Are you sure you want to delete these Modifiers?</span>
            </div>
            <div class="modal-footer d-flex justify-content-center gap-2">
                <button type="button" class="btn btn-primary delete-selectedM-Yes" data-bs-dismiss="modal">YES</button>
                <button type="button" class="btn btn-danger">NO</button>
            </div>
        </div>
    </div>
</div>

<!-- Add New modifier group -->
<div class="modal-addNewMG"></div>

<!-- edit Modifiers group -->
<div class="modal-editMG"></div>

<div class="modal-selectExisting">

    <!-- select existing modifiers -->
    <div class="modal fade modal-delete" id="selectExistingModifiers" tabindex="-1" aria-labelledby="deleteModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" id="exModifier-table">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="selectExistingModifiers">Select Existing Modifiers</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <div class="search-field position-relative w-50">
                        <input class="search form-control me-2 border-0" id="searchExModifier" type="search"
                            aria-label="Search">
                        <i class="bi bi-search custom-icon"></i>
                    </div>
                    <div class="existing-modifier-data"></div>

                </div>
            </div>
        </div>

    </div>
</div>


<!-- delete modifiers grop -->
<div class="modal fade modal-delete" id="deleteModifiersGrop" tabindex="-1" aria-labelledby="deleteModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <input type="hidden" id="hidden" value="">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModifiersGrop">Delete Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column align-items-center justify-content-center">
                <img src="../images/warning-icon.svg" alt="" width="50px" height="50px"><br>
                <span>Are you sure you want to delete this ModifiersGrop?</span>
            </div>
            <div class="modal-footer d-flex justify-content-center gap-2">
                <button type="button" class="btn btn-primary delete-MG" data-bs-dismiss="modal">YES</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">NO</button>
            </div>
        </div>
    </div>
</div>





<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

<script src="../js/bootstarp.bundle.min.js"></script>
<script src="../js/bootstarp.bundle.min.js"></script>
<script>
    // Get elements
    const sidebar = document.getElementById('categorySlider');
    const sidebar2 = document.getElementById('modifierSlider');
    const overlay1 = document.getElementById('overlay1');
    const overlay2 = document.getElementById('overlay2');

    // Add event listener to overlay
    overlay1.addEventListener('click', function () {
        // Close the sidebar by removing the 'show' class
        sidebar.classList.remove('show');

    });
    overlay2.addEventListener('click', function () {
        // Close the sidebar by removing the 'show' class
        sidebar2.classList.remove('show');
    });


    var selectExModifier = [];
    var selectedModifiername = new Map();


    $(document).ready(function () {


        @* page link *@
            $("#item-table").on("click", ".pagination-link", function (e) {
                var categoryId = $("#catid").val();
                e.preventDefault();
                let page = $(this).data("page");

                if (page > 0) {
                    loadItemTable(categoryId, page);
                }
            });

        @* page size *@
            $("#item-table").on("change", "#pageSizeSelect", function () {
                var categoryId = $("#catid").val();
                loadItemTable(categoryId, 1)
            });


        @* search field *@

            let searchTimer;
        $("#searchInput").on("input", function () {
            var categoryId = $("#catid").val();
            var element = $(".custom-icon");
            element.addClass("d-none");
            clearTimeout(searchTimer);
            searchTimer = setTimeout(function () {
                if (categoryId !== '0') {
                    loadItemTable(categoryId, 1);
                }
                else {
                    loadItemTable(globalCat, 1);
                }
                // Reset to page 1 when searching
            }, 500); // 500ms delay to avoid excessive requests
            searchcross();
        });


        @* page link modifier*@
            $("#modifier-table").on("click", ".pagination-link", function (e) {
                var MGid = $("#MGid").val();
                e.preventDefault();
                let page = $(this).data("page");

                if (page > 0) {
                    loadModifierTable(MGid, page);
                }
            });

        @* page size modifier*@
            $("#modifier-table").on("change", "#pageSizeSelectM", function () {
                var MGid = $("#MGid").val();
                loadModifierTable(MGid, 1)
            });


        @* search field modifier*@

            let searchTimer1;
        $("#searchModifier").on("input", function () {
            var MGid = $("#MGid").val();
            var element = $(".custom-icon");
            element.addClass("d-none");
            clearTimeout(searchTimer1);
            searchTimer = setTimeout(function () {
                if (MGid !== '0') {
                    loadModifierTable(MGid, 1);
                }
                else {
                    loadModifierTable(globalModifier, 1);
                }
                // Reset to page 1 when searching
            }, 500); // 500ms delay to avoid excessive requests
            searchcrossForModifier();
        });

        @* add item model *@
            $(document).on("click", ".openModel", function (e) {


                $.ajax({
                    url: "/Menu/AddItem",
                    type: "GET",
                    data: { categoryId: globalCat },
                    success: function (response) {
                        $(".modal-addNewItem").html(response);
                        $("#addItem").modal("show");
                    },
                    error: function (error) {
                        alert("failed to reload modal");
                    }
                });
            });


        @* get category list *@

            function catList() {
                $.ajax({
                    url: "/Menu/CategoryList",
                    type: "GET",
                    success: function (response) {
                        $("#category-list").html(response);
                        $(".cat-list").removeClass("menu-active");
                        $('.cat-list[data-id="' + globalCat + '"]').addClass("menu-active");
                    },
                    error: function (error) {
                    }
                });
            }

        catList();
        loadFirstItemTable(1);

        $("#save-cat").click(function (e) {
            e.preventDefault();

            console.log($("#addCat").valid());

            if ($("#addCat").valid()) {
                var formData = $("#addCat").serialize();

                $.ajax({
                    url: "/Menu/addCategory",
                    type: "POST",
                    data: formData,
                    dataType: 'json',
                    success: function (response) {
                        if (response.success) {
                            $("#addCat")[0].reset();
                            $("#addNewCategory").modal("hide");
                            catList();
                            toastr.success("Category Added Succesfully.");
                        }
                        else {
                            toastr.error("This Category is already exist.");
                        }
                    },
                    error: function (error) {
                        console.error("Error adding Item:", error);
                    }
                });
            }
        });

        $('#addNewCategory').on('hidden.bs.modal', function () {
            $("#addCat")[0].reset();
        });

        var globalCat;
        var globalModifier;

        $(document).on("click", ".cat-link", function (e) {
            selectedIds = [];
            $("#searchInput").val("");
            var categoryId = $(this).data("id");
            loadItemTable(categoryId,1);
        });

        function loadItemTable(categoryId, page) {

            globalCat = categoryId;

            // Set active class centrally
            $(".cat-list").removeClass("menu-active");
            $('.cat-list[data-id="' + globalCat + '"]').addClass("menu-active");

            let pageSize = $("#pageSizeSelect").val();
            let search = $("#searchInput").val();

            $.ajax({
                url: "/Menu/itemTable",
                type: "GET",
                data: {
                    id: categoryId,
                    page: page,
                    pageSize: pageSize,
                    search: search
                },
                success: function (data) {
                    $('#item-table').html(data);
                    currentPage = page;
                    restoreCheckedState();
                },
                error: function () {
                }
            });
        }


        @* modifier *@

            function MGList() {
                $.ajax({
                    url: "/Menu/ModiGroupList",
                    type: "GET",
                    success: function (response) {
                        $("#Modifiers-group").html(response);
                        $(".mg-list").removeClass("menu-active");
                        $('.mg-list[data-id="' + globalModifier + '"]').addClass("menu-active");
                    },
                    error: function (error) {
                    }
                });
            }

        function loadFirstModitable(page) {

            let pageSize = $("#pageSizeSelectM").val();
            let search = $("#searchModifier").val();


            $.ajax({
                url: "/Menu/FirstMGId",
                type: "GET",
                data: {
                    page: page,
                    pageSize: pageSize,
                    search: search
                },
                success: function (response) {
                    loadModifierTable(response, 1);
                    currentPage = page;
                },
                error: function (error) {
                }
            });
        }

        function loadFirstItemTable(page) {


            let pageSize = $("#pageSizeSelect").val();
            let search = $("#searchInput").val();

            $.ajax({
                url: "/Menu/FirstCatId",
                type: "GET",
                data: {
                    page: page,
                    pageSize: pageSize,
                    search: search
                },
                success: function (response) {
                    globalCat = response;
                    loadItemTable(response, 1);
                    currentPage = page;
                },
                error: function (error) {
                }
            });
        }



        MGList();
        loadFirstModitable(1);


        $(document).on("click", ".MG-link", function (e) {
            selectedModifierIds = [];
            $("#searchModifier").val("");
            var MGId = $(this).data("id");
            loadModifierTable(MGId, 1);
        });

        function loadModifierTable(MGId, page) {

            globalModifier = MGId;

            // Set active clmg-listass centrally
            $(".mg-list").removeClass("menu-active");
            $('.mg-list[data-id="' + globalModifier + '"]').addClass("menu-active");

            let pageSize = $("#pageSizeSelectM").val();
            let search = $("#searchModifier").val();


            $.ajax({
                url: '@Url.Action("modifierTable", "Menu")',
                type: "GET",
                data: {
                    id: MGId,
                    page: page,
                    pageSize: pageSize,
                    search: search
                },
                success: function (data) {
                    $('#modifier-table').html(data);
                    currentPage = page;
                    restoreCheckedModifier();
                },
                error: function () {
                }
            });
        }


        $(document).on("click", ".edit-link", function (e) {
            var categoryId = $(this).data("catid");
            GetEditCat(categoryId);
        });

        function GetEditCat(categoryId) {

            $.ajax({
                url: "/Menu/EditCat",
                type: "GET",
                data: { id: categoryId },
                success: function (data) {
                    $("#Categoryname").val(data.categoryname);
                    $("#Description").val(data.description);
                    $("#categoryid").val(categoryId);
                },
                error: function () {
                    alert("error in responce");
                }
            });
        }

        @* Update category *@
            $("#save-edit-cat").click(function (e) {
                if ($("#editCat").valid()) {
                    e.preventDefault();
                    var formData = {
                        categoryid: $("#categoryid").val(),
                        categoryname: $("#Categoryname").val(),
                        description: $("#Description").val()
                    };

                    $.ajax({
                        url: "/Menu/EditCat",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(formData),
                        success: function (response) {

                            if (response.success) {
                                $("#editNewCategory").modal("hide");
                                catList();
                                toastr.success("Category Updated Succesfully.");
                            }
                            else {
                                toastr.error("This Category is already exist.");
                            }

                        },
                        error: function (error) {
                            console.error("Error updating permissions:", error);
                        }
                    });
                }
            });

        @* delete Category *@

            $(document).on("click", ".delete-link", function (e) {
                var categoryId = $(this).data("catid");
                $("#hidden").val(categoryId);
            });

        $(document).on("click", ".delete-cat", function (e) {
            var categoryId = $("#hidden").val();
            DeleteCat(categoryId);
        });

        function DeleteCat(categoryId) {
            $.ajax({
                url: "/Menu/DeleteCat",
                type: "POST",
                data: { id: categoryId },
                success: function (response) {
                    loadFirstItemTable(1);
                    catList();
                    toastr.success("Category Deleted Succesfully.");
                },
                error: function (error) {
                    console.error("Error updating permissions:", error);
                }
            });
        }

        function updateModifierGroupIndexes() {
            console.log("in function");
            $(".modifier-group").each(function (index) {
                console.log("in loop");
                $(this).find(".modifier-group-id").attr("name", `ModifierGroups[${index}].Modifiergroupid`);
                $(this).find(".min-selection").attr("name", `ModifierGroups[${index}].Minselectionrequired`);
                $(this).find(".max-selection").attr("name", `ModifierGroups[${index}].Maxselectionallowed`);
            });
        }

        @* edit item *@

            $(document).on("click", "#edit-item", function (e) {

                e.preventDefault();
                updateModifierGroupIndexes();
                if ($("#edit-item-form").valid()) {
                    var formData = new FormData($("#edit-item-form")[0]);
                    var categoryId = formData.get("Categoryid");


                    $.ajax({
                        url: "/Menu/EditItemPost",
                        type: "POST",
                        data: formData,
                        processData: false,
                        contentType: false,
                        dataType: 'json',
                        success: function (response) {
                            if (response.success) {
                                $("#updateItem").modal("hide");
                                loadItemTable(categoryId, 1);
                                toastr.success("Item Updated Succesfully.");
                            }
                            else {
                                toastr.error("This Item is already exist.");
                            }
                        },
                        error: function (error) {
                            console.error("Error updating permissions:", error);
                        }
                    });
                }

            });

        @* add item *@

            $(document).on("click", "#add-item", function (e) {
                e.preventDefault();

                if ($("#add-item-form").valid()) {
                    var formData = new FormData($("#add-item-form")[0]);

                    var categoryId = $("#Categoryid").val();

                    $.ajax({
                        url: "/Menu/addItemPost",
                        type: "POST",
                        data: formData,
                        processData: false,
                        contentType: false,
                        dataType: 'json',
                        success: function (response) {
                            if (response.success) {
                                $("#add-item-form")[0].reset();
                                $("#addItem").modal("hide");
                                loadItemTable(categoryId, 1);
                                toastr.success("Item Added Succesfully.");
                            }
                            else {
                                toastr.error("This Item is already exist.");
                            }

                        },
                        error: function (error) {
                            console.error("Error in Add Modifier:", error);
                        }
                    });
                }
            });

        @* Delete Item *@

            $(document).on("click", ".delete-item", function (e) {

                 e.preventDefault();

                var itemId = $("#hidden").val();
                var categoryId = $("#Categoryid").val();
               

                $.ajax({
                    url: "/Menu/DeleteItem",
                    type: "POST",
                    data: { id: itemId },
                    success: function (response) {
                       loadItemTable(globalCat, 1);
                        toastr.success("Item Deleted Succesfully.");
                    },
                    error: function (error) {
                        console.error("Error updating permissions:", error);
                    }
                });

            });


        @* deleted selected item *@
          var selectedIds = [];

        $(document).on("change", "input[name='Sitem']", function (e) {
            let value = $(this).val();

            if ($(this).is(":checked")) {
                // Add value if checked
                selectedIds.push(value);
            } else {
                // Remove value if unchecked
                selectedIds = selectedIds.filter(item => item !== value);
            }

            updateMasterCheckbox();
        });

        function restoreCheckedState() {
            $("input[name='Sitem']").each(function () {
                let value = $(this).val();
                $(this).prop("checked", selectedIds.includes(value));
            });

            updateMasterCheckbox();
        }

        $(document).on("click", ".delete-selected-yes", function (e) {

            $.ajax({
                url: "/Menu/DeleteSelectedItem",
                type: "POST",
                data: { selectedIds: selectedIds },
                success: function (response) {
                    selectedIds = [];
                    loadItemTable(globalCat, 1);
                    toastr.success("Selected Item Deleted Succesfully.");
                },
                error: function (error) {
                    console.error("Error updating permissions:", error);
                }
            });
        });


        @* open model for add modifier *@
            $(document).on("click", ".openModifierModel", function (e) {
                $.ajax({
                    url: "/Menu/AddModifier",
                    type: "GET",
                    success: function (response) {
                        $(".modal-addNewModifier").html(response);
                        $("#addNewModifier").modal("show");
                    },
                    error: function (error) {
                        alert("failed to reload modal");
                    }
                });
            });

        @* add modifier *@

            $(document).on("click", "#add-modifier", function (e) {
                e.preventDefault();
                let selectedMG = [];
                $(".modifier-checkbox:checked").each(function () {
                    selectedMG.push($(this).val());
                });


                if (selectedMG.length === 0) {
                    $("#requaired-mg").text("At least one modifier group ID is required").show();
                }
                else {
                    if ($("#add-modifier-form").valid()) {
                        $("#requaired-mg").hide();
                        var formData = new FormData($("#add-modifier-form")[0]);
                        formData.append("ModifierGroupIds", JSON.stringify(selectedMG));


                        @* var Modifiergroupid = $("#Modifiergroupid").val(); *@

                            $.ajax({
                                url: "/Menu/addModifierPost",
                                type: "POST",
                                data: formData,
                                processData: false,
                                contentType: false,
                                dataType: 'json',
                                success: function (response) {
                                    if (response.success) {
                                        $("#addNewModifier").modal("hide");
                                        $("#add-modifier-form")[0].reset();
                                        loadModifierTable(selectedMG[0], 1);
                                        toastr.success("Modifier Added Succesfully.");
                                    }
                                    else {
                                        toastr.error("This Modifier is already exist.");
                                    }

                                },
                                error: function (error) {
                                    console.error("Error in Add Modifier:", error);
                                }
                            });

                    }
                }

            });



        @* edit modifier get *@

            // ✅ Reusable function to update dropdown text
            function updateModifierDropdown() {
                let selectedTexts = [];

                $(".modifier-checkbox:checked").each(function () {
                    selectedTexts.push($(this).next("label").text());
                });

                if (selectedTexts.length === 0) {
                    $("#modifierDropdown").html("Select Modifiers Groups(s)");
                } else if (selectedTexts.length === 1) {
                    $("#modifierDropdown").html(`<span class="modifier-pill">${selectedTexts[0]}</span>`);
                } else {
                    $("#modifierDropdown").html(
                        `<span class="modifier-pill">${selectedTexts[0]}</span> 
             <span class="modifier-count">+ ${selectedTexts.length - 1} others</span>`
                    );
                }
            }


        //  Call function on checkbox change
        $(document).on("change", ".modifier-checkbox", function (e) {
            updateModifierDropdown();
            let checkbox = $('.modifier-checkbox:checked');
            if (checkbox.length > 0) {
                $("#requaired-mg").hide();
            }
            else {
                $("#requaired-mg").text("At least one modifier group ID is required").show();
            }

        });



        $(document).on("click", ".edit-modifier", function (e) {
            e.preventDefault();
            var modifierId = $(this).data("modifierid");


            $.ajax({
                url: "/Menu/EditModifier",
                type: "GET",
                data: { id: modifierId },
                success: function (data) {
                    if (data.selectedMGIds) {
                        $(".modifier-checkbox").prop("checked", false);

                        $(".modal-editModifier").html(data.html);
                        $("#updateNewModifier").modal("show");
                        data.selectedMGIds.forEach(groupId => {
                            $("#mod_" + groupId).prop("checked", true);
                        });
                        updateModifierDropdown();
                    }
                },
                error: function () {
                    alert("failed to reload modal");
                }
            });

        });

        @* edit modifier *@

            $(document).on("click", "#edit-modifier", function (e) {
                e.preventDefault();

                let selectedMG = [];
                $(".modifier-checkbox:checked").each(function () {
                    selectedMG.push($(this).val());
                });

                if (selectedMG.length === 0) {
                    $("#requaired-mg").text("At least one modifier group ID is required").show();
                }
                else {
                    if ($("#edit-modifier-form").valid()) {
                        $("#requaired-mg").hide();
                        var formData = new FormData($("#edit-modifier-form")[0]);
                        formData.append("ModifierGroupIds", JSON.stringify(selectedMG));
                        @* var Modifiergroupid = $("#MGid").val();  *@


                            $.ajax({
                                url: "/Menu/EditModifietrPost",
                                type: "POST",
                                data: formData,
                                processData: false,
                                contentType: false,
                                dataType: 'json',
                                success: function (response) {
                                    if (response.success) {
                                        $("#updateNewModifier").modal("hide");
                                        loadModifierTable(selectedMG[0], 1);
                                        toastr.success("Modifier Updated Succesfully.");
                                    }
                                    else {
                                        toastr.error("This Modifier is already exist.");
                                    }

                                },
                                error: function (error) {
                                    console.error("Error updating modifier:", error);
                                }
                            });
                    }
                }
            });


        @* Delete Modifier *@

            $(document).on("click", ".delete-modifier", function (e) {
                var ModifierId = $("#hidden").val();
                var MGId = $("#modifiergroupid").val();

                $.ajax({
                    url: "/Menu/DeleteModifier",
                    type: "POST",
                    data: { id: ModifierId, MGid: MGId },
                    success: function (response) {
                        loadModifierTable(MGId);
                        toastr.success("Modifier Deleted Succesfully.");
                    },
                    error: function (error) {
                        console.error("Error in delete Modifier:", error);
                    }
                });

            });

        @* deleted selected modifier*@

        var selectedModifierIds = [];

        $(document).on("change", "input[name='SModifier']", function (e) {
            let value = $(this).val();

            if ($(this).is(":checked")) {
                // Add value if checked
                selectedModifierIds.push(value);
            } else {
                // Remove value if unchecked
                selectedModifierIds = selectedModifierIds.filter(item => item !== value);
            }

            updateModifierMasterCheckbox();
        });

        function restoreCheckedModifier() {
            $("input[name='SModifier']").each(function () {
                let value = $(this).val();
                $(this).prop("checked", selectedModifierIds.includes(value));
            });
            updateModifierMasterCheckbox();
        }




        $(document).on("click", "#delete-selected-modifiers", function (e) {
            var MGId = $("#MGid").val();
            $("#selectMG").val(MGId);
        });


        $(document).on("click", ".delete-selectedM-Yes", function (e) {
            var MGId = $("#selectMG").val();


            $.ajax({
                url: "/Menu/DeleteSelectedModifiers",
                type: "POST",
                data: { selectedIds: selectedModifierIds, MGid: MGId },
                success: function (response) {
                    selectedModifierIds = [];
                    loadModifierTable(1);
                    toastr.success("Selected Modifiers Deleted Succesfully.");
                },
                error: function (error) {
                    console.error("Error in delete Modifiers", error);
                }
            });
        });


        @* Add modifier group model *@

            $(document).on("click", "#openMGModel", function (e) {


                $.ajax({
                    url: "/Menu/AddMG",
                    type: "GET",
                    success: function (response) {
                        $(".modal-addNewMG").html(response);
                        $("#addModifiersGroup").modal("show");
                        selectExModifier.length = 0; // Clear old data
                        selectedModifiername.clear();

                    },
                    error: function (error) {
                        console.error("Error in delete Modifi9", error);
                    }
                });
            });

        @* add existing modifier *@


            function restoreCheckedExState() {
                $("input[name='SExmodifier']").each(function () {
                    let value = $(this).val();
                    $(this).prop("checked", selectExModifier.includes(value));
                });
                updateExMMasterCheckbox();
            }


        $(document).on("change", "input[name='SExmodifier']", function (e) {
            let value = $(this).val();
            let modifierName = $(this).data("id");

            if ($(this).is(":checked")) {
                // Add value if checked
                selectExModifier.push(value);
                selectedModifiername.set(value, modifierName);
            } else {
                // Remove value if unchecked
                selectExModifier = selectExModifier.filter(item => item !== value);
                selectedModifiername.delete(value);
            }
            updateExMMasterCheckbox();
        });

        @* Existing modifier Table *@


            $(document).on("click", ".select-existing", function (e) {
                e.preventDefault();
                loadExistingModifier(1);
            });

        function loadExistingModifier(page) {

            let pageSize = $("#pageSizeSelectEXM").val();
            let search = $("#searchExModifier").val();

            $.ajax({
                url: "/Menu/SelectExModifier",
                type: "GET",
                data: {
                    page: page,
                    pageSize: pageSize,
                    search: search
                },
                success: function (data) {
                    $(".existing-modifier-data").html(data);
                    $("#selectExistingModifiers").modal("show");
                    restoreCheckedExState();
                },
                error: function (error) {
                    console.log("in error");
                    console.error("Error in load modal", error);
                }
            });

        }

        @* page link *@
            $("#exModifier-table").on("click", ".pagination-link", function (e) {
                e.preventDefault();

                let page = $(this).data("page");

                if (page > 0) {
                    loadExistingModifier(page);
                }
            });

        @* page size *@
            $("#exModifier-table").on("change", "#pageSizeSelectEXM", function () {
                loadExistingModifier(1);
            });


        let searchTimer3;
        $("#searchExModifier").on("input", function () {
            var element = $(".custom-icon");
            element.addClass("d-none");
            clearTimeout(searchTimer3);
            searchTimer3 = setTimeout(function () {
                loadExistingModifier(1);  // Reset to page 1 when searching
            }, 500); // 500ms delay to avoid excessive requests
            searchcrossForEXM();
        });

        $(document).on("click", ".add-ex-modifier", function (e) {
            e.preventDefault();
            displaySelectedModifiers();
        });


        @* display list of selected modifier *@

            function displaySelectedModifiers() {
                const container = $(".ex-modifier");
                container.empty(); // Clear previous content

                selectedModifiername.forEach((modifierName, id) => {
                    const tag = $(`
            <span class="badge bg-white me-2 mb-2 p-2" style="    font-size: 15px;
     color: #212529;
    font-weight: 500;
    border: 1px solid #21252942;
    border-radius: 30px;">
                ${modifierName} <i class="bi bi-x-circle remove-modifier" data-id="${id}"></i>
            </span>
        `);
                    container.append(tag);
                });
            }

        @* remove button in existing modifier*@

            $(document).on("click", ".remove-modifier", function (e) {
                e.preventDefault();
                let value = $(this).data("id").toString();
                selectExModifier = selectExModifier.filter(item => item !== value);
                selectedModifiername.delete(value);
                displaySelectedModifiers();
            });

        @* Add modifier group *@

            $(document).on("click", "#add-MG", function (e) {
                e.preventDefault();

                if ($("#add-MG-form").valid()) {
                    var formData = new FormData($("#add-MG-form")[0]);
                    formData.append("selectedModifier", JSON.stringify(selectExModifier));

                    $.ajax({
                        url: "/Menu/AddMGPost",
                        type: "POST",
                        data: formData,
                        processData: false,
                        contentType: false,
                        dataType: 'json',
                        success: function (response) {
                            if (response.success) {
                                $("#add-MG-form")[0].reset();
                                $("#addModifiersGroup").modal("hide");
                                MGList();
                                toastr.success("ModifierGroup Added Succesfully.");
                            }
                            else {
                                toastr.error("This Modifiergroup is already exist.");
                            }

                        },
                        error: function (error) {
                            console.error("Error in add Modifiergroup", error);
                        }
                    });
                }

            });

        @* get edit modifier group *@

            $(document).on("click", ".edit-MG", function (e) {

                e.preventDefault();


                var MGId = $(this).data("modifiergroupid");


                $.ajax({
                    url: "/Menu/EditMG",
                    type: "GET",
                    data: { id: MGId },
                    success: function (data) {

                        if (data.selectedModifiers) {
                            selectExModifier.length = 0; // Clear old data
                            selectedModifiername.clear();

                            data.selectedModifiers.forEach(modifier => {
                                if (modifier && modifier.modifierid !== undefined) {
                                    let modifierId = modifier.modifierid.toString();
                                    selectExModifier.push(modifierId);
                                    selectedModifiername.set(modifierId, modifier.modifiername);
                                }
                            });
                            $(".modal-editMG").html(data.html);
                            $("#updateModifiersGroup").modal("show");
                            restoreCheckedModifier();
                            displaySelectedModifiers();
                        }
                    },
                    error: function () {
                        console.error("Error in update mg", error);
                    }
                });

            });





        @* Edit Modifier group *@

            $(document).on('hidden.bs.modal', '.modal', function () {
                if ($('.modal:visible').length > 0) {
                    $('body').addClass('modal-open');
                }
            });



        $(document).on("click", "#edit-MG-Yes", function (e) {
            e.preventDefault();

            if ($("#edit-MG-form").valid()) {
                var formData = new FormData($("#edit-MG-form")[0]);
                formData.append("selectedModifier", JSON.stringify(selectExModifier));

                $.ajax({
                    url: "/Menu/EditMGPost",
                    type: "POST",
                    data: formData,
                    processData: false,
                    contentType: false,
                    dataType: 'json',
                    success: function (response) {

                        if (response.success) {
                            $("#updateModifiersGroup").modal("hide");
                            MGList();
                            toastr.success("ModifierGroup Updated Succesfully.");
                        }
                        else {
                            toastr.error("This Modifiergroup is already exist.");
                        }

                    },
                    error: function (error) {
                        console.error("Error updating modifierGroup:", error);
                    }
                });
            }

        });

        @* Delete ModifierGroup *@

            $(document).on("click", ".delete-MG", function (e) {
                var MGId = $("#hidden").val();

                $.ajax({
                    url: "/Menu/DeleteMG",
                    type: "POST",
                    data: { id: MGId },
                    success: function (response) {
                        loadFirstModitable(1);
                        MGList();
                        toastr.success("ModifierGroup Deleted Succesfully.");
                    },
                    error: function (error) {
                        console.error("Error in delete Modifier group:", error);
                    }
                });

            });


        @* master check box in item *@

            function updateMasterCheckbox() {
                let totalCheckboxes = $("input[name='Sitem']").length;
                let checkedCheckboxes = $("input[name='Sitem']:checked").length;

                $("#masterCheckbox").prop("checked", totalCheckboxes > 0 && totalCheckboxes === checkedCheckboxes);
                $("#masterCheckbox").prop("indeterminate", checkedCheckboxes > 0 && checkedCheckboxes < totalCheckboxes);

            }


        $(document).on("change", "#masterCheckbox", function (e) {
            let isChecked = $(this).is(":checked");

            // Select only checkboxes **visible on the current page**
            $("input[name='Sitem']").each(function () {

                let value = $(this).val();

                if (isChecked) {
                    if (!selectedIds.includes(value)) {
                        selectedIds.push(value);
                    }
                } else {
                    selectedIds = selectedIds.filter(item => item !== value);
                }

            });

            // Check/uncheck only the checkboxes on the current page
            $("input[name='Sitem']").prop("checked", isChecked);
        });



        @* modifier master checkbox *@

            $(document).on("change", "#ModifierMasterCheckbox", function (e) {
                let isChecked = $(this).is(":checked");

                // Select only checkboxes **visible on the current page**
                $("input[name='SModifier']").each(function () {

                    let value = $(this).val();

                    if (isChecked) {
                        if (!selectedModifierIds.includes(value)) {
                            selectedModifierIds.push(value);
                        }
                    } else {
                        selectedModifierIds = selectedModifierIds.filter(item => item !== value);
                    }

                });

                // Check/uncheck only the checkboxes on the current page
                $("input[name='SModifier']").prop("checked", isChecked);
            });

        function updateModifierMasterCheckbox() {
            let totalCheckboxes = $("input[name='SModifier']").length;
            let checkedCheckboxes = $("input[name='SModifier']:checked").length;

            $("#ModifierMasterCheckbox").prop("checked", totalCheckboxes > 0 && totalCheckboxes === checkedCheckboxes);
            $("#ModifierMasterCheckbox").prop("indeterminate", checkedCheckboxes > 0 && checkedCheckboxes < totalCheckboxes);

        }


        @* master checkbox in existing modifier *@

            $(document).on("change", "#ExMmasterCheckbox", function (e) {
                let isChecked = $(this).is(":checked");

                // Select only checkboxes **visible on the current page**
                $("input[name='SExmodifier']").each(function () {

                    let value = $(this).val();
                    let modifierName = $(this).data("id");

                    if (isChecked) {
                        if (!selectExModifier.includes(value)) {
                            selectExModifier.push(value);
                            selectedModifiername.set(value, modifierName);
                        }
                    } else {
                        selectExModifier = selectExModifier.filter(item => item !== value);
                        selectedModifiername.delete(value);
                    }

                });

                // Check/uncheck only the checkboxes on the current page
                $("input[name='SExmodifier']").prop("checked", isChecked);
            });

        function updateExMMasterCheckbox() {
            let totalCheckboxes = $("input[name='SExmodifier']").length;
            let checkedCheckboxes = $("input[name='SExmodifier']:checked").length;

            $("#ExMmasterCheckbox").prop("checked", totalCheckboxes > 0 && totalCheckboxes === checkedCheckboxes);
            $("#ExMmasterCheckbox").prop("indeterminate", checkedCheckboxes > 0 && checkedCheckboxes < totalCheckboxes);

        }

        function searchcross() {
            let search = $("#searchInput").val();
            if (search === "") {
                var element = $(".custom-icon");
                element.removeClass("d-none");
            }
        }

        function searchcrossForModifier() {
            let search = $("#searchModifier").val();
            if (search === "") {
                var element = $(".custom-icon");
                element.removeClass("d-none");
            }
        }

        @* cross in search field. *@
            function searchcrossForEXM() {
                let search = $("#searchExModifier").val();
                if (search === "") {
                    var element = $(".custom-icon");
                    element.removeClass("d-none");
                }
            }

        @* Available button update *@

            $(document).on("click", ".available-switch", function (e) {
                var itemid = $(this).data("itemid");



                var available = $(this).is(":checked");

                $.ajax({
                    url: "/Menu/UpdateItemAvailble",
                    type: "POST",
                    data: { id: itemid, available: available },
                    success: function (response) {
                        if (response.success)
                            toastr.success("Item Available Updated Succesfully.")
                        loadItemTable(globalCat, 1);
                    },
                    error: function (error) {
                        console.error("Error in update item:", error);
                    }
                });

            });




    });


</script>