@using Newtonsoft.Json
@using pizzashop.Entity.ViewModels
@{
    ViewData["Title"] = "TableAndSection Page";
}
@{
    var permissionCookie = Context.Request.Cookies["PermissionData"];
    var permissionModel = string.IsNullOrEmpty(permissionCookie)
    ? new PermissionRequest()
    : JsonConvert.DeserializeObject<PermissionRequest>(permissionCookie);

    var tablePermission = permissionModel?.Permissions?.FirstOrDefault(p => p.Moduleid == 4);
}


<link rel="stylesheet" href="~/css/TableAndSection.css" />

<div class="w-100 main-content px-4">



    <div class="heading-text py-2">
        <h1><b>Sections/Tables</b></h1>
    </div>

    <div class="d-flex tables">

        <div class="Section-slider collapse d-xl-block" id="SectionSlider">


            <div class="mb-4 d-flex justify-content-between">
                <div class="slider-heading-text">
                    <b>Section</b>
                </div>
                <button class="plus-button button" id="loadAddSectionModel" class="delet-btn">
                    <img class="plus-img" src="../images/plus-lg.svg" alt="" class="">
                </button>
            </div>

            <div id="section-list"></div>

        </div>

        <div id="overlay1" class="overlay1"></div>

        <div class="Tables-table w-100" id="table-Table">


            <div class="Tables-table-heading-text mb-2 mt-2 ms-3 d-flex gap-2 justify-content-start">


                <button class="navbar-toggler d-block d-xl-none" type="button" data-bs-toggle="collapse"
                    data-bs-target="#SectionSlider" aria-controls="SectionSlider" aria-expanded="false"
                    aria-label="Toggle navigation">
                    <img src="../images/list (1).svg" width="25px" height="25px" alt="Menu Icon" class="menu-icon">
                </button>

                <h3><b>Tables</b></h3>
            </div>




            <div class="button-input mb-2 me-3">

                <div class="search-field position-relative">
                    <input class="search form-control me-2 border-0" type="search" placeholder="Search"
                        id="searchInTable" aria-label="Search">
                    <i class="bi bi-search custom-icon"></i>
                </div>

                @if (tablePermission.Candelete == true)
                {
                    <button class="button" data-bs-toggle="modal" data-bs-target="#deleteSelectedTables" class="delet-btn">
                        <image class="delet-icon" src="../images/trash.svg" />
                    </button>
                }

                @if (tablePermission.Canaddedit == true)
                {
                    <button class="new-table-btn button openAddTableModel">
                        <i class="bi bi-plus"></i><span class="d-none d-sm-inline">New Table</span>
                    </button>
                }

            </div>

            <div id="load-tables"></div>


        </div>

    </div>
</div>

<div id="modal-addSection"></div>


<div class="modal-addNewTable"></div>

<!-- delete selected Tables -->
<div class="modal fade modal-delete" id="deleteSelectedTables" tabindex="-1" aria-labelledby="deleteModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteSelectedTables">Delete Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column align-items-center justify-content-center">
                <img src="../images/warning-icon.svg" alt="" width="50px" height="50px"><br>
                <span>Are you sure you want to delete these Tables?</span>
            </div>
            <div class="modal-footer d-flex justify-content-center gap-2">
                <button type="button" class="btn btn-primary delete-selected-yes" data-bs-dismiss="modal">YES</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">NO</button>
            </div>
        </div>
    </div>
</div>

<div class="modal-editsection"></div>

<!-- delete Section modal -->
<div class="modal fade modal-delete" id="deleteSection" tabindex="-1" aria-labelledby="deleteModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <input type="hidden" id="hidden" value="">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column align-items-center justify-content-center">
                <img src="../images/warning-icon.svg" alt="" width="50px" height="50px"><br>
                <span>Are you sure you want to delete this Section?</span>
            </div>
            <div class="modal-footer d-flex justify-content-center gap-2">
                <button type="button" class="btn btn-primary delete-section" data-bs-dismiss="modal">YES</button>
                <button type="button" class="btn btn-danger">NO</button>
            </div>
        </div>
    </div>
</div>



<script src="../js/bootstarp.bundle.min.js"></script>
<script src="../js/bootstarp.bundle.min.js"></script>
<script>
    // Get elements
    const sidebar = document.getElementById('SectionSlider');
    const overlay1 = document.getElementById('overlay1');

    // Add event listener to overlay
    overlay1.addEventListener('click', function () {
        // Close the sidebar by removing the 'show' class
        sidebar.classList.remove('show');

    });
</script>

<script>

    $(document).ready(function () {


        var globalSectionId;

        @* page link  *@
            $("#table-Table").on("click", ".pagination-link", function (e) {
                e.preventDefault();
                let page = $(this).data("page");

                if (page > 0) {
                    loadTablesBySec(globalSectionId, page);
                }
            });

        @* page size *@
            $("#table-Table").on("change", "#pageSizeTable", function () {
                loadTablesBySec(globalSectionId, 1)
            });


        @* search field *@

            let searchTimer4;
        $("#searchInTable").on("input", function () {
            var element = $(".custom-icon");
            element.addClass("d-none");
            clearTimeout(searchTimer4);
            searchTimer4 = setTimeout(function () {
                loadTablesBySec(globalSectionId, 1);
                // Reset to page 1 when searching
            }, 500); // 500ms delay to avoid excessive requests
            searchcross();
        });


        @* load section table *@

            function SectionList() {

                $.ajax({
                    url: "/TableAndSection/SectionList",
                    type: "GET",
                    success: function (response) {
                        $("#section-list").html(response);
                        $(".section-link").removeClass("menu-active");
                        $('.section-link[data-secid="' + globalSectionId + '"]').addClass("menu-active");

                    },
                    error: function (error) {
                    }
                });
            }

        loadFirstTable(1);

         function loadFirstTable(page) {

            let pageSize = $("#pageSizeTable").val();
            let search = $("#searchInTable").val();

            $.ajax({
                url: "/TableAndSection/FirstSecId",
                type: "GET",
                data: {
                    page: page,
                    pageSize: pageSize,
                    search: search
                },
                success: function (response) {
                    loadTablesBySec(response, 1);
                    currentPage = page;
                },
                error: function (error) {
                }
            });
        }


        SectionList();

        $(document).on("click", ".section-link", function (e) {
            selectedTableIds = [];
            $("#searchInTable").val("");
            var sectionId = $(this).data("secid");
            loadTablesBySec(sectionId, 1);
        });


        @* load tablelist *@

            function loadTablesBySec(sectionId, page) {

                globalSectionId = sectionId;

                $(".section-link").removeClass("menu-active");
                $('.section-link[data-secid="' + globalSectionId + '"]').addClass("menu-active");

                let pageSize = $("#pageSizeTable").val();
                let search = $("#searchInTable").val();

                $.ajax({
                    url: "/TableAndSection/TablesList",
                    type: "GET",
                    data: {
                        id: sectionId,
                        page: page,
                        pageSize: pageSize,
                        search: search
                    },
                    success: function (data) {
                        $('#load-tables').html(data);
                        restoreCheckedState();
                        currentPage = page;
                    },
                    error: function () {
                    }
                });
            }

        @* load add section model *@

            $(document).on("click", "#loadAddSectionModel", function (e) {

                $.ajax({
                    url: "/TableAndSection/AddSectionGet",
                    type: "GET",
                    success: function (data) {
                        $('#modal-addSection').html(data);
                        $("#addNewSection").modal("show");
                    },
                    error: function () {
                    }
                });

            });

        @* add section *@

            $(document).on("click", "#add-section", function (e) {
                e.preventDefault();

                if ($("#add-section-form").valid()) {
                    var formData = new FormData($("#add-section-form")[0]);

                    $.ajax({
                        url: "/TableAndSection/AddSectionPost",
                        type: "POST",
                        data: formData,
                        processData: false,
                        contentType: false,
                        dataType: 'json',
                        success: function (response) {
                            if (response.success) {
                                $("#add-section-form")[0].reset();
                                $("#addNewSection").modal("hide");
                                SectionList();
                                toastr.success("Section Added Succesfully.");
                            }
                            else {
                                toastr.error("This Section name is already exist.");
                            }
                        },
                        error: function (error) {
                            console.error("Error in add Section", error);
                        }
                    });
                }
            });

        @* edit section *@

            $(document).on("click", "#edit-Section", function (e) {

                e.preventDefault();

                if ($("#edit-section-form").valid()) {
                    var formData = new FormData($("#edit-section-form")[0]);

                    $.ajax({
                        url: "/TableAndSection/EditSectionPost",
                        type: "POST",
                        data: formData,
                        processData: false,
                        contentType: false,
                        dataType: 'json',
                        success: function (response) {
                            if (response.success) {
                                $("#editSection").modal("hide");
                                SectionList();
                                toastr.success("Section Updated Succesfully.");
                            }
                            else {
                                toastr.error("This Section name is already exist.");
                            }
                        },
                        error: function (error) {
                            console.error("Error updating modifierGroup:", error);
                        }
                    });
                }

            });

        @* Delete Section *@

            $(document).on("click", ".delete-section", function (e) {
                var sectionid = $("#hidden").val();

                $.ajax({
                    url: "/TableAndSection/DeleteSection",
                    type: "POST",
                    data: { id: sectionid },
                    success: function (response) {
                        if (response.success) {
                            loadFirstTable(1);
                            SectionList();
                            toastr.success(response.message);
                        }
                        else {
                            toastr.error(response.message);
                        }

                    },
                    error: function (error) {
                        console.error("Error in delete delete group:", error);
                    }
                });

            });

        @* open model for add table *@
            $(document).on("click", ".openAddTableModel", function (e) {

                $.ajax({
                    url: "/TableAndSection/AddTable",
                    type: "GET",
                    data: { sectionId: globalSectionId },
                    success: function (response) {
                        $(".modal-addNewTable").html(response);
                        $("#addNewTable").modal("show");
                    },
                    error: function (error) {
                        alert("failed to reload modal");
                    }
                });
            });


        @* add table *@

            $(document).on("click", "#add-table", function (e) {
                e.preventDefault();

                // Trigger the client-side validation first
                if ($("#add-table-form").valid()) {
                    $("#orderstatus").prop("disabled", false);
                    var formData = new FormData($("#add-table-form")[0]);
                    var sectionid = formData.get("Sectionid");

                    $.ajax({
                        url: "/TableAndSection/AddTablePost",
                        type: "POST",
                        data: formData,
                        processData: false,
                        contentType: false,
                        dataType: 'json',
                        success: function (response) {
                            if (response.success) {
                                // Reset the form and close the modal if successful
                                $("#add-table-form")[0].reset();
                                $("#addNewTable").modal("hide");
                                loadTablesBySec(sectionid, 1);
                                toastr.success("Table Added Successfully.");
                            } else {
                                // Show error message if the table name is taken
                                $("#orderstatus").prop("disabled", true);
                                toastr.error("This Table name is already taken in this section.");
                            }
                        },
                        error: function (error) {
                            console.error("Error in add Table", error);
                            toastr.error("Internal server error");
                        }
                    });
                }

            });


        @* edit table *@

            $(document).on("click", "#edit-table", function (e) {
                var sectionId = $("#Sectionid").val();
                e.preventDefault();


                if ($("#edit-table-form").valid()) {
                    var formData = new FormData($("#edit-table-form")[0]);

                    $("#orderstatus").prop("disabled", false);

                    $.ajax({
                        url: "/TableAndSection/EditTablePost",
                        type: "POST",
                        data: formData,
                        processData: false,
                        contentType: false,
                        dataType: 'json',
                        success: function (response) {
                            if (response.success) {
                                $("#editTable").modal("hide");
                                loadTablesBySec(sectionId, 1);
                                toastr.success("Table Updated Succesfully.");
                            }
                            else {
                                $("#orderstatus").prop("disabled", true);
                                toastr.error("This table name is already exists in this section.");
                            }
                        },
                        error: function (error) {
                            console.error("Error updating modifierGroup:", error);
                        }
                    });
                }
            });

        @* Delete Table *@

            $(document).on("click", ".delete-table", function (e) {
                var tableId = $("#hidden").val();
                var sectionid = $("#sectionid").val();

                $.ajax({
                    url: "/TableAndSection/DeleteTable",
                    type: "POST",
                    data: { id: tableId },
                    success: function (response) {
                        if (response.success) {
                            loadTablesBySec(globalSectionId, 1);
                            toastr.success(response.message);
                        }
                        else {
                            toastr.error(response.message);
                        }
                    },
                    error: function (error) {
                        console.error("Error in delete delete group:", error);
                    }
                });

            });


        @* deleted selected Tables *@
    
      var selectedTableIds = [];

        $(document).on("change", "input[name='Stable']:not(:disabled)", function (e) {
            let value = $(this).val();

            if ($(this).is(":checked")) {
                // Add value if checked
                selectedTableIds.push(value);
            } else {
                // Remove value if unchecked
                selectedTableIds = selectedTableIds.filter(item => item !== value);
            }
            updateTableMasterCheckbox();
        });

        function restoreCheckedState() {
            $("input[name='Stable']:not(:disabled)").each(function () {
                let value = $(this).val();
                $(this).prop("checked", selectedTableIds.includes(value));
            });
            updateTableMasterCheckbox();
        }

        $(document).on("click", ".delete-selected-yes", function (e) {

            $.ajax({
                url: "/TableAndSection/DeleteSelectedTables",
                type: "POST",
                data: { selectedTableIds: selectedTableIds },
                success: function (response) {
                    selectedTableIds = [];
                    loadTablesBySec(globalSectionId, 1);
                    toastr.success("Selected Tables Deleted Succesfully.");
                },
                error: function (error) {
                    console.error("Error deleting table:", error);
                }
            });
        });

        @* master checkbox  *@

            $(document).on("change", "#TablemasterCheckbox", function (e) {
                let isChecked = $(this).is(":checked");

                // Select only checkboxes **visible on the current page**
                $("input[name='Stable']:not(:disabled)").each(function () {

                    let value = $(this).val();


                    if (isChecked) {
                        if (!selectedTableIds.includes(value)) {
                            selectedTableIds.push(value);
                        }
                    } else {
                        selectedTableIds = selectedTableIds.filter(item => item !== value);
                    }

                });

                // Check/uncheck only the checkboxes on the current page
                $("input[name='Stable']:not(:disabled)").prop("checked", isChecked);
            });


        function updateTableMasterCheckbox() {
            let totalCheckboxes = $("input[name='Stable']:not(:disabled)").length;
            let checkedCheckboxes = $("input[name='Stable']:not(:disabled):checked").length;

            $("#TablemasterCheckbox").prop("checked", totalCheckboxes > 0 && totalCheckboxes === checkedCheckboxes);
            $("#TablemasterCheckbox").prop("indeterminate", checkedCheckboxes > 0 && checkedCheckboxes < totalCheckboxes);
        }

        function searchcross() {
            let search = $("#searchInTable").val();
            if (search === "") {
                var element = $(".custom-icon");
                element.removeClass("d-none");
            }
        }


    });


</script>
