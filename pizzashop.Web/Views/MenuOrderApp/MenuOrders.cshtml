@using Newtonsoft.Json
@inject IHttpContextAccessor HttpContextAccessor
@{

  Layout = "~/Views/Shared/_OrderAppLayout.cshtml";
  var orderId = Context.Request.Query["orderId"];
  string? token = HttpContextAccessor.HttpContext?.Request.Cookies["CustomerToken"];
}

<link rel="stylesheet" href="~/css/OrderMenu.css" />

<div class="offcanvas-lg offcanvas-start" tabindex="-1" id="categoryList" aria-labelledby="categoryList">
  <div class="categoryList">
  </div>
</div>

<div class="d-flex flex-row gap-4 w-100">

  <div class="main-content w-100">

    <div class="d-block d-sm-flex justify-content-between mb-3 align-items-center flex-wrap">

      <div class="d-flex align-items-center mb-2 mb-sm-0 menu-list">
        <button class="btn d-inline d-lg-none mb-0 p-1 me-2" type="button" data-bs-toggle="offcanvas"
          data-bs-target="#categoryList" aria-controls="categoryList"
          style="width:40px; height:40px;background-color: hsla(216, 50%, 79%, 0.352);">
          <i class="h2 bi bi-list"></i>
        </button>
        <div class="search-field position-relative">
          <input class="search form-control me-2 border-0" type="search" placeholder="Search" id="searchInput"
            aria-label="Search">
          <i class="bi bi-search custom-icon"></i>
        </div>
      </div>

      <div class="d-flex flex-row gap-1 justify-content-center justify-content-sm-end ms-auto">
        <div class="d-flex flex-row align-items-center">
          <span class="dot me-1" style="background-color: green;border-color: green"></span>
          <span>Vegetarian</span>
        </div>
        <div class="d-flex flex-row align-items-center">
          <span class="dot me-1" style="background-color: red;border:4px solid red "></span>
          <span>Non-Vegetarian</span>
        </div>
        <div class="d-flex flex-row align-items-center">
          <span class="dot me-1" style="background-color: orange;border-color: orange;"></span>
          <span>Vegan</span>
        </div>
      </div>
    </div>

    <div class="row overflow-y-auto  item-list p-2">

    </div>


  </div>

  @if (!string.IsNullOrEmpty(orderId))
  {
    <div class="offcanvas-xl offcanvas-end order-details-partial card w-100"
      style="height:100%; background-color:rgba(128, 128, 128, 0.248);" id="cart">

    </div>
  }

</div>

@if (!string.IsNullOrEmpty(orderId))
{
  <button class="btn d-xl-none px-0 py-0" type="button" data-bs-toggle="offcanvas" data-bs-target="#cart"
    aria-controls="cart"
    style="background-color:#adc3e4; width:50px; height:50px; border-radius:5%; box-shadow: 0px 0px 5px #000000; z-index: 5;position:fixed; bottom: 25px; right: 25px;">
    <i class="bi bi-cart3 fs-1 mt-0"></i>
  </button>
}

<div class="modifier-list"></div>


<!-- OrderWise Comment -->
<div class="modal fade modal-delete" id="OrderWiseComment" tabindex="-1" aria-labelledby="deleteModalLabel"
  aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <input type="hidden" id="OrderId-comment">
      <div class="modal-header">
        <h5 class="modal-title" id="OrderWiseComment">Order Wise Comment</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="form-floating ">
          <textarea id="textareaID" class="form-control" placeholder="" style="height: 100px"></textarea>
          <label for="textareaID">Comment*</label>
          <span class="text-danger" id="comment-error"></span>
        </div>
      </div>
      <div class="modal-footer d-flex justify-content-end gap-2">
        <button type="button" class="btn btn-primary Add-Order-Comment">YES</button>
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">NO</button>
      </div>
    </div>
  </div>
</div>


<!-- ItemWise Comment -->
<div class="modal fade modal-delete" id="ItemWiseComment" tabindex="-1" aria-labelledby="deleteModalLabel"
  aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">

      <div class="modal-header">
        <h5 class="modal-title" id="ItemWiseComment">Order Wise Comment</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" id="Orderitemid">
        <div class="form-floating ">
          <textarea id="textareaInstruction" class="form-control" placeholder="" style="height: 100px"></textarea>
          <label for="textareaInstruction">Instruction*</label>
          <span class="text-danger" id="instruction-error"></span>
        </div>
      </div>
      <div class="modal-footer d-flex justify-content-end gap-2">
        <button type="button" class="btn btn-primary Add-OrderItem-Instruction">YES</button>
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">NO</button>
      </div>
    </div>
  </div>
</div>


@* cancel order *@
<div class="modal fade modal-delete" id="deleteOrderModal" tabindex="-1" aria-labelledby="deleteModalLabel"
  aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteOrderModal">Delete Confirmation</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body d-flex flex-column align-items-center justify-content-center">
        <img src="../images/warning-icon.svg" alt="" width="50px" height="50px"><br>
        <span>Are you sure you want to Cancel this Order?</span>
      </div>
      <input type="hidden" id="orderid" value="">
      <div class="modal-footer d-flex justify-content-center gap-2">
        <a class="delete-cat">
          <button type="button" class="btn btn-primary cancel-order-yes">YES</button>
        </a>
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">NO</button>
      </div>
    </div>
  </div>
</div>


@* Complte order *@
<div class="modal fade modal-delete" id="CompleteOrderModal" tabindex="-1" aria-labelledby="deleteModalLabel"
  aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="CompleteOrderModal">Delete Confirmation</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body d-flex flex-column align-items-center justify-content-center">
        <img src="../images/warning-icon.svg" alt="" width="50px" height="50px"><br>
        <span>Are you sure you want to Complete this Order?</span>
      </div>
      <input type="hidden" id="orderid" value="">
      <div class="modal-footer d-flex justify-content-center gap-2">
        <a class="delete-cat">
          <button type="button" class="btn btn-primary complele-order-yes">YES</button>
        </a>
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">NO</button>
      </div>
    </div>
  </div>
</div>


@* customer-details-model *@
<div class="customer-detail-partial"></div>


<!-- review model -->
<div class="modal fade modal-delete" id="reviewModal" tabindex="-1" aria-labelledby="deleteModalLabel"
  aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">

      <div class="modal-header">
        <h5 class="modal-title" id="reviewModal">Customer Review</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="reviewForm">
        <div class="modal-body">
          <input type="hidden" id="RevieworderId" value="" /> <!-- Set dynamically -->

          <div class="d-flex align-items-center justify-content-between">
            <label class="fw-bold">Food</label>
            <div class="star-rating" data-field="foodRating"></div>
          </div>
          <div class="d-flex align-items-center justify-content-between">
            <label class="fw-bold">Service</label>
            <div class="star-rating" data-field="serviceRating"></div>
          </div>
          <div class="d-flex align-items-center justify-content-between">
            <label class="fw-bold">Ambience</label>
            <div class="star-rating" data-field="ambienceRating"></div>
          </div>
          <hr class="my-3 fw-bold" style="color: gold; border-width: 2px;">
          <div class="form-floating mb-3">
            <textarea id="comment" class="form-control" style="height: max-content;"></textarea>
            <label for="comment">Comments:</label>
          </div>
        </div>
        <div class="modal-footer d-flex justify-content-end gap-2">
          <button type="button" class="btn btn-primary submit-review">YES</button>
          <button type="button" class="btn btn-danger" data-bs-dismiss="modal">NO</button>
        </div>
      </form>
    </div>
  </div>
</div>


@* Scan QR Code *@
<div class="modal fade modal-delete" id="Sacenner" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="Sacenner">Menu</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body d-flex flex-column align-items-center justify-content-center">
        <img id="qrImage" src="" alt="QR Code" width="250px" height="250px" /><br>
      </div>
      <div class="modal-footer d-flex justify-content-center gap-2">
        <button type="button" class="btn btn-primary scanner-close" data-bs-dismiss="modal">Done</button>
      </div>
    </div>
  </div>
</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

<script>
  var GCatId = "";
  let OrderItem = [];
  let selectedModifiers = {};
  let originalOrderItem = []; // original cart for comparison
  let selectedFlatTaxIds = [];
  let originalFlatTaxIds = [];

  function deepCopyCart(cart) {
    return JSON.parse(JSON.stringify(cart));
  }

  function arraysEqual(arr1, arr2) {
    return arr1.length === arr2.length && arr1.every(val => arr2.includes(val));
  }

  function hasCartChanged() {
    return JSON.stringify(OrderItem) !== JSON.stringify(originalOrderItem);
  }

  function hasTaxChanged() {
    return !arraysEqual(selectedFlatTaxIds, originalFlatTaxIds);
  }

  function updateCartChangeStatus() {
    const changed = hasCartChanged() || hasTaxChanged();
    $(".saveorder").prop("disabled", !changed);
    $(".complete-button").prop("disabled", changed);
    $(".generate-invoice").prop("disabled", changed);
  }

  function renderOrderItems() {
    console.log(OrderItem);
    $("#order-items-container").empty();

    OrderItem.forEach((item, index) => {
      let modifierList = "";

      if (Array.isArray(item.Modifiers)) {
        modifierList = item.Modifiers.map(m =>
          `<li>${m.Modifiername}   ₹${m.Rate}</li>`
        ).join("");
      }

      const modifiersTotalPrice = item.Modifiers?.reduce((total, modifier) => total + modifier.Rate, 0) * item.Quantity;

      const itemHtml = `
            <div class="rounded border mb-2 cart-item-card" 
               data-orderitemid=${item.orderitemid}
               data-itemindex=${index}
               data-itemcomment=${item.Itemwisecomment} >
                <div class="d-flex">
                    <div class="accordion d-flex flex-column justify-content-start gap-2 p-2 w-50">
                       ${Array.isArray(item.Modifiers) && item.Modifiers.length > 0 ? `
    <button class="accordion-button collapsed p-2 bg-transparent border-0 no-comment-trigger"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#collapse-${index}"
            aria-expanded="false"
            aria-controls="collapse-${index}">
      <strong class="ps-1">${item.Itemname}</strong>
    </button>
    <div id="collapse-${index}" class="accordion-collapse collapse"
         data-orderitemid=${item.orderitemid} data-itemindex=${index}>
      <div class="ps-3">
        <ul class="mb-0">${modifierList}</ul>
      </div>
    </div>
  ` : `
    <div class="p-2">
      <strong class="ps-1">${item.Itemname}</strong>
    </div>
  `}
                    </div>
                    <div class="d-flex justify-content-around align-items-center flex-row w-50">
                        <div class="d-flex align-items-center border rounded px-2 py-1">
                            <i class="bi bi-dash no-comment-trigger" style="cursor: pointer;" onclick=" updateQuantity(event,${index}, -1)"></i>
                            <span class="mx-2">${item.Quantity}</span>
                            <i class="bi bi-plus no-comment-trigger" style="cursor: pointer;" onclick="updateQuantity(event,${index}, 1)"></i>
                        </div>
                        <div class="text-center">
                            <div class="fw-bold">₹${item.Rate * item.Quantity}</div>
                           <div class="text-muted small">${modifiersTotalPrice ? `₹${modifiersTotalPrice}` : ''}</div>
                        </div>
                        <i class="bi bi-trash text-muted fs-6 no-comment-trigger" style="cursor: pointer;" onclick="removeItem(${index})"></i>
                    </div>
                </div>
            </div>
        `;

      $("#order-items-container").append(itemHtml);

    });

    renderFlatTaxes(taxes);
    calculateTaxesAndDisplay(OrderItem, taxes);

  }

  @* load Category details *@
    function loadCategoryList() {
      $.ajax({

        url: "/MenuOrderApp/CategoryList",
        type: "GET",
        success: function (data) {
          $('.categoryList').html(data);
          $(`.category`).removeClass('active');
          $(`.category[data-catid="${GCatId}"]`).addClass('active');
        },
        error: function () {
          alert("error in load Item.")
        }
      });
    }


  @* load item table *@
    function loadItemList(catid) {
      GCatId = catid;
      let search = $("#searchInput").val();

      $.ajax({

        url: "/MenuOrderApp/ItemList",
        type: "GET",
        data: { id: catid, search: search },
        success: function (data) {
          $('.item-list').html(data);
          loadCategoryList();
        },
        error: function () {
          alert("error in load category.")
        }
      });
    }

  @* load item table *@
    function loadOrderDetails() {

      const Id = new URLSearchParams(window.location.search).get('orderId');
      const orderId = parseInt(Id)

      $.ajax({
        url: "/MenuOrderApp/OrderDetails",
        type: "GET",
        data: { id: orderId },
        success: function (data) {
          $('.order-details-partial').html(data);
        },
        error: function () {
          alert("error in load category.")
        }
      });
    }

  function searchcross() {
    let search = $("#searchInput").val();
    if (search === "") {
      var element = $(".custom-icon");
      element.removeClass("d-none");
    }
  }

  // Function to check if the modifiers are the same
  function isSameModifiers(modifiersA = [], modifiersB = []) {
    // Extract the modifierid from both arrays and convert them into sets
    const setA = new Set(modifiersA.map(m => m.Modifierid));
    const setB = new Set(modifiersB.map(m => m.Modifierid));

    // Check if both sets have the same size
    if (setA.size !== setB.size) {
      return false;
    }

    // Check if every element in setA is also present in setB
    for (let item of setA) {
      if (!setB.has(item)) {
        return false;
      }
    }

    return true; // If both conditions pass, they are the same
  }

  @* update item *@
    function updateQuantity(event,index, change) {
      const item = OrderItem[index];
      const isLocked = item.ReadyQuantity >= item.Quantity;

      if (change < 0 && isLocked) {
        toastr.error("Cannot decrease quantity. Items are already prepared.")
        return;
      }

      item.Quantity += change;

      if (item.Quantity <= 0) {
        OrderItem.splice(index, 1);
      }
      event.stopPropagation();

      renderOrderItems();
      updateCartChangeStatus();
    }

  @* remove item *@
    function removeItem(index) {
      const item = OrderItem[index];
      const isLocked = item.ReadyQuantity > 0;

      if (isLocked) {
        toastr.error("Cannot delete this item. It's already marked as ready.")
        return;
      }

      OrderItem.splice(index, 1);
      renderOrderItems();
      updateCartChangeStatus();
    }


  function calculateTaxesAndDisplay(orderItems, taxes) {
    const orderId = parseInt(new URLSearchParams(window.location.search).get('orderId'));
    let subTotal = 0;
    let defaultTaxTotal = 0;
    let percentageTaxTotal = 0;
    let flatTaxTotal = 0;
    let taxBreakdownHtml = '';
    let itemmodifierTotal = 0;

    OrderTax = [];

    orderItems.forEach(item => {
      const itemTotal = item.Rate * item.Quantity;
      itemmodifierTotal = itemTotal;

      // Add modifier prices
      if (item.Modifiers && item.Modifiers.length > 0) {
        item.Modifiers.forEach(mod => {
          itemmodifierTotal += (mod.Rate * item.Quantity);
        });
      }

      subTotal += itemmodifierTotal;

      if (item.Isdefaulttax === true) {
        var currenttax = parseFloat(item.Taxpercentage) || 0;
        const taxAmount = (itemTotal * currenttax) / 100;
        defaultTaxTotal += taxAmount;
      }

    });

    // Percentage taxes (not default tax)
    taxes.filter(t => t.taxtype === 0 && t.Taxid != 0).forEach(tax => {
      const taxAmount = (subTotal * tax.Taxvalue) / 100;

      percentageTaxTotal += taxAmount;

      // Push percentage tax
      OrderTax.push({
        Orderid: orderId,
        Taxid: tax.Taxid,
        Taxvalue: parseFloat(taxAmount)
      });


      if (OrderItem.length != 0) {
        taxBreakdownHtml += `
        <div class="d-flex justify-content-between fs-6">
            <div>${tax.Taxname}</div>
            <div class="taxamount">₹${taxAmount.toFixed(2)}</div>
        </div>`;
      }

    });

    // Flat taxes (only if checked)
    $('.flat-tax-checkbox:checked').each(function () {
      const taxId = $(this).data('taxid');
      const taxValue = parseFloat($(this).data('taxvalue'));
      const tax = taxes.find(t => t.Taxid == taxId);
      const taxName = tax ? tax.Taxname : 'Flat Tax';

      flatTaxTotal += taxValue;

      // Push flat tax
      OrderTax.push({
        Orderid: orderId,
        Taxid: taxId,
        Taxvalue: parseFloat(taxValue)
      });


    });

    const totalTax = defaultTaxTotal + percentageTaxTotal + flatTaxTotal;
    const totalAmount = subTotal + totalTax;

    if (OrderItem.length != 0) {
      taxBreakdownHtml += `
        <div class="d-flex justify-content-between fs-6">
            <div>DafaultTax(Item)</div>
            <div class="taxamount">₹${defaultTaxTotal}</div>
        </div>`;
    }

    OrderTax.push({
      Orderid: orderId,
      Taxid: 0,
      Taxvalue: parseFloat(defaultTaxTotal)
    });


    // Render all
    $('#subtotal').text(`₹${subTotal.toFixed(2)}`);
    $('#taxBreakdown').html(taxBreakdownHtml);
    $('#totalAmount').text(`₹${totalAmount.toFixed(2)}`);
  }

  @* Flat amount display *@

    function initializeFlatTaxesFromDB(orderTaxes) {
      selectedFlatTaxIds = orderTaxes
        .filter(t => t.Taxid != 0)
        .map(t => t.Taxid);
      originalFlatTaxIds = [...selectedFlatTaxIds];
    }

  function renderFlatTaxes(taxes) {
    let flatTaxHtml = '';

    taxes.filter(t => t.taxtype === 1).forEach(tax => {
      const isChecked = selectedFlatTaxIds.includes(tax.Taxid) ? 'checked' : '';
      if (OrderItem.length != 0) {
        flatTaxHtml += `
        <div class="d-flex justify-content-between fs-6">
        <div class="form-check">
            <input class="form-check-input flat-tax-checkbox" type="checkbox"
                data-taxid="${tax.Taxid}" data-taxvalue="${tax.Taxvalue}" id="tax_${tax.Taxid}" ${isChecked} 
                @(string.IsNullOrEmpty(token) ? "" : "disabled")>
            <label class="form-check-label" for="tax_${tax.taxid}">
                ${tax.Taxname} 
            </label>
        </div>
        <div>₹${tax.Taxvalue}</div>
        </div>`;
      }
    });

    $('#flatTaxList').html(flatTaxHtml);
    calculateTaxesAndDisplay(OrderItem, taxes);
  }



  $(document).ready(function () {

    loadCategoryList();
    loadItemList(0);
    loadOrderDetails();

    @* chekbox change *@
      // Trigger recalculation when flat tax is checked/unchecked
      $(document).on('change', '.flat-tax-checkbox', function () {
        const taxId = parseInt($(this).data('taxid'));

        if (this.checked) {
          if (!selectedFlatTaxIds.includes(taxId)) {
            selectedFlatTaxIds.push(taxId);
          }
        } else {
          selectedFlatTaxIds = selectedFlatTaxIds.filter(id => id !== taxId);
        }

        calculateTaxesAndDisplay(OrderItem, taxes);
        updateCartChangeStatus();
      });

    @* load items onlick *@
      $(document).on("click", ".category", function (e) {
        e.preventDefault();
        var categoryId = $(this).data("catid");
        loadItemList(categoryId);
      });

    @* search from itenms *@
      let searchTimer;
    $("#searchInput").on("input", function () {
      var element = $(".custom-icon");
      element.addClass("d-none");
      clearTimeout(searchTimer);
      searchTimer = setTimeout(function () {
        loadItemList(GCatId);
        // Reset to page 1 when searching
      }, 500); // 500ms delay to avoid excessive requests
      searchcross();
    });



    @* add into Favourite *@
      $(document).on("click", ".Favourite", function (e) {
        e.stopPropagation();
        var itemId = $(this).data("itemid");

        $.ajax({
          url: '/MenuOrderApp/ToggleFavourite',
          type: 'POST',
          data: { id: itemId },
          success: function (isFavourite) {
            if (isFavourite.isFavourite == true) {
              loadItemList(GCatId);
              toastr.success("Item Added in Favourite.")
            } else {
              loadItemList(GCatId);
              toastr.error("Item Remove From the Favourite.")
            }
          },
          error: function () {
            alert("Error toggling favourite status.");
          }
        });
      });



    $(document).on("click", ".itemCard", function (e) {
      e.preventDefault();

      const orderId = parseInt(new URLSearchParams(window.location.search).get('orderId'));
      const Id = new URLSearchParams(window.location.search).get('orderId');


      var itemId = $(this).data("item-id");
      const itemName = $(this).data("item-name");
      const itemPrice = parseFloat($(this).data("item-price"));
      const Isdefaulttax = $(this).data("is-default") == "True";
      const taxPercentage = parseFloat($(this).data("tax-percentage"));

      selectedModifiers = {};


      $.ajax({
        url: `/MenuOrderApp/ModifierList?orderId=${Id}`,
        type: "GET",
        data: { id: itemId },
        success: function (data) {
          if (data.success === false) {
            // Check if item without modifiers already exists
            const itemExists = OrderItem.find(item => item.Itemid === itemId && (!item.Modifiers || item.Modifiers.length === 0));

            if (itemExists) {
              // Increase quantity if already exists
              const index = OrderItem.findIndex(item => item.Itemid === itemId && (!item.Modifiers || item.Modifiers.length === 0));
              OrderItem[index].Quantity += 1;
            }
            else {

              OrderItem.push({
                Orderitemid: 0,
                Itemid: itemId,
                Itemname: itemName,
                Rate: itemPrice,
                ReadyQuantity: 0,
                Quantity: 1,
                Isdefaulttax: Isdefaulttax,
                Taxpercentage: taxPercentage,
                Itemwisecomment: ""
              });
            }
            renderOrderItems();
            updateCartChangeStatus();

          }
          else {
            $('.modifier-list').html(data);
            // Store current uniqueId in modal
            $("#modifierData").data("item-id", itemId);
            $("#modifierData").data("item-name", itemName);
            $("#modifierData").data("item-price", itemPrice);
            $("#modifierData").data("is-default", Isdefaulttax);
            $("#modifierData").data("tax-percentage", taxPercentage);
            $("#modifierData").modal("show");
          }
        },
        error: function () {
          alert("error in load category.")
        }
      });

    });

    $(document).on("click", ".modifier-card", function () {
      const orderId = parseInt(new URLSearchParams(window.location.search).get('orderId'));
      console.log(orderId);

      if (!orderId) {
        return null;
      }

      var $card = $(this);
      var modifierGroupId = $card.closest(".modifier-group").data("groupid");
      var modifierId = $card.data("modifierid");

      var maxSelection = parseInt($card.closest(".modifier-group").data("maxselection")) || Infinity;

      if (!selectedModifiers[modifierGroupId]) {
        selectedModifiers[modifierGroupId] = [];
      }

      var currentSelections = selectedModifiers[modifierGroupId];
      var isSelected = $card.hasClass("selected");

      if (isSelected) {
        selectedModifiers[modifierGroupId] = currentSelections.filter(id => id !== modifierId);
        $card.removeClass("selected");

      } else {
        if (currentSelections.length >= maxSelection) {
          toastr.warning("You can select a maximum of " + maxSelection + " modifiers for this group.");
          return;
        }
        selectedModifiers[modifierGroupId].push(modifierId);
        $card.addClass("selected");
      }
    });

    $(document).on("click", "#add-button", function () {
      console.log("in add button");
      var allValid = true;


      $(".modifier-group").each(function () {
        var $group = $(this);
        var groupId = $group.data("groupid");
        var minSelection = parseInt($group.data("minselection")) || 0;
        var selected = selectedModifiers[groupId] || [];

        if (selected.length < minSelection) {
          toastr.warning("Group " + groupId + ": You must select at least " + minSelection + " modifier(s).");
          allValid = false;
        }
      });

      if (allValid) {
        // Proceed to add item to cart or next step
        console.log("All validations passed!");

        // Get item details from modal or clicked item
        const itemId = $("#modifierData").data("item-id");
        const itemName = $("#modifierData").data("item-name");
        const itemPrice = parseFloat($("#modifierData").data("item-price"));
        const Isdefaulttax = $("#modifierData").data("is-default");

        const taxPercentage = parseFloat($("#modifierData").data("tax-percentage"));

        let flatModifiers = [];

        $(".modifier-card.selected").each(function () {
          flatModifiers.push({
            Modifierid: $(this).data("modifierid"),
            Modifiername: $(this).data("modifiername"),
            Rate: parseFloat($(this).data("rate"))
          });
        });


        // Check if item is already in cart by uniqueId
        const itemExists = OrderItem.find(item => item.Itemid === itemId && isSameModifiers(item.Modifiers, flatModifiers));

        if (itemExists) {
          // If item already exists, update its quantity
          const index = OrderItem.findIndex(i => i.Itemid === itemId && isSameModifiers(i.Modifiers, flatModifiers));
          OrderItem[index].Quantity += 1;
        } else {

          OrderItem.push({
            Orderitemid: 0,
            Itemid: itemId,
            Itemname: itemName,
            Rate: itemPrice,
            Modifiers: flatModifiers,
            ReadyQuantity: 0,
            Quantity: 1,
            Isdefaulttax: Isdefaulttax,
            Taxpercentage: taxPercentage,
            Itemwisecomment: ""
          });

        }
        $("#modifierData").modal("hide");
        console.log(OrderItem);
        renderOrderItems();
        updateCartChangeStatus();
      }
    });


    @* save order *@
      $(document).on("click", ".saveorder", function (e) {
        e.preventDefault();

        const orderId = parseInt(new URLSearchParams(window.location.search).get('orderId'));

        const Bill = {
          Orderid: orderId,
          Items: OrderItem,
          OrderTax: OrderTax
        };

        $.ajax({
          url: '/MenuOrderApp/SaveOrder',
          type: 'POST',
          data: JSON.stringify(Bill),
          contentType: 'application/json',
          success: function (response) {
            if (response.success) {
              toastr.success(response.message);
              loadOrderDetails();
            }
            else {
              toastr.error(response.message);
            }
          },
          error: function (err) {
            console.log("Error status: " + status);  // Inspect status code
            console.log("Error response: " + error);  // Inspect error message
            alert("Error while saving the order. Please check the console for details.");
          }
        });
      });

    @*Get orderWise comment *@
      $(document).on("click", ".order-wise-comment", function (e) {
        e.preventDefault();
        var orderId = $(this).data("orderid");

        $.ajax({
          url: '/MenuOrderApp/OrderComment',
          type: 'GET',
          data: { id: orderId },
          success: function (response) {
            console.log(response);
            if (response.success) {
              $("#OrderWiseComment").modal("show");
              $("#textareaID").val(response.message);
              $("#OrderId-comment").val(orderId);
            } else {
              toastr.error(response.message);
            }
          },
          error: function () {
            alert("Error Add orderwise comment.");
          }
        });


      });

    $(document).on("click", ".Add-Order-Comment", function (e) {
      e.preventDefault();

      var Comment = $("#textareaID").val();

      if (Comment.length <= 0) {
        $("#comment-error").text("Comment is required");
        return;
      } else {
        $("#comment-error").text("");
        var orderid = $("#OrderId-comment").val();
        $.ajax({
          url: '/MenuOrderApp/AddOrderComment',
          type: 'POST',
          data: { comment: Comment, orderid: orderid },
          success: function (response) {
            if (response.success) {
              toastr.success(response.message);
              $("#OrderWiseComment").modal("hide");
            } else {
              toastr.error(response.message);
            }
          },
          error: function (xhr, status, error) {
            console.error('Error fetching waiting token:', error);
          }
        });
      }
    });


    @* item wise comment *@
      $(document).on("click", ".cart-item-card", function (e) {
        if ($(e.target).closest(".no-comment-trigger").length) {
          return; // Skip modal if clicked element is marked to not trigger it
        }


        e.preventDefault();
        var orderitemid = $(this).data("orderitemid");
        var itemindexvalue = $(this).data("itemindex");

        var itemcomment = $(this).data("itemcomment");
        console.log(orderitemid, itemindexvalue, itemcomment)


        $("#ItemWiseComment").modal("show");
        $("#textareaInstruction").val(itemcomment);
        $("#instruction-error").text("");
        $(".Add-OrderItem-Instruction").data("itemindex", itemindexvalue);

        $("#Orderitemid").val(orderitemid);
      });


    @* Add itemwise instruction *@

      $(document).on("click", ".Add-OrderItem-Instruction", function (e) {
        e.preventDefault();
        e.stopPropagation();

        var Comment = $("#textareaInstruction").val();

        if (Comment.length <= 0) {
          $("#instruction-error").text("Instruction is required");
          return;
        } else {

          $("#instruction-error").text("");
          var orderitemid = $("#Orderitemid").val();
          var itemindex = $(this).data("itemindex");


          OrderItem[itemindex].Itemwisecomment = Comment;


          $("#ItemWiseComment").modal("hide");
          $("#instruction-error").text("");
          $("#textareaInstruction").val("");
          renderOrderItems();
          updateCartChangeStatus();

        }
      });

    @* cancel button *@

      $(document).on("click", ".cancel-button", function (e) {

        const hasReadyItems = OrderItem.some(item => item.ReadyQuantity > 0);

        if (hasReadyItems) {
          toastr.error('Cannot cancel order because some items are already prepared.');
          return;
        }
        $("#deleteOrderModal").modal("show");
        const Id = parseInt(new URLSearchParams(window.location.search).get('orderId'));
        $("#orderid").val(Id);
      });

    @* cancel button yes *@
      $(document).on("click", ".cancel-order-yes", function (e) {
        var orderid = $("#orderid").val();

        $.ajax({
          url: "/MenuOrderApp/CancelOrder",
          type: "POST",
          data: { id: orderid },
          success: function (response) {
            if (response.success) {
              $("#deleteOrderModal").modal("hide");
              toastr.success(response.message);
              @* loadOrderDetails(); *@
                window.location.href = `/TableOrderApp/TablesOrder`;
            }
            else {
              toastr.error(response.message);
            }

          },
          error: function (error) {
            console.error("Error in Cancel Order.", error);
          }
        });

      });

    @* Complete button *@

      $(document).on("click", ".complete-button", function (e) {

        const hasInProgressItems = OrderItem.some(item => item.ReadyQuantity < item.Quantity);

        if (hasInProgressItems) {
          toastr.error('Some items are still being prepared. Cannot complete the order!');
          return;
        }
        $("#CompleteOrderModal").modal("show");
        const Id = parseInt(new URLSearchParams(window.location.search).get('orderId'));
        $("#orderid").val(Id);
      });


    @* complete button yes *@
      $(document).on("click", ".complele-order-yes", function (e) {
        var orderid = $("#orderid").val();


        $.ajax({
          url: "/MenuOrderApp/CompleteOrder",
          type: "POST",
          data: { id: orderid },
          success: function (response) {
            if (response.success) {
              $("#CompleteOrderModal").modal("hide");
              toastr.success(response.message);
              $("#RevieworderId").val(orderid);
              $("#reviewModal").modal("show");
              loadOrderDetails();
            }
            else {
              toastr.error(response.message);
            }

          },
          error: function (error) {
            console.error("Error in Cancel Order.", error);
          }
        });

      });

    @* review  *@


      function renderStars($container) {
        for (let i = 1; i <= 5; i++) {
          $container.append(`<i class="bi bi-star me-1" data-value="${i}"></i>`);
        }
      }

    $('.star-rating').each(function () {
      renderStars($(this));
    });

    $(document).on('mouseenter', '.star-rating i', function () {
      const value = $(this).data('value');
      $(this).parent().children('i').each(function () {
        $(this).toggleClass('bi-star-fill', $(this).data('value') <= value);
        $(this).toggleClass('bi-star', $(this).data('value') > value);
      });
    });

    $(document).on('click', '.star-rating i', function () {
      const field = $(this).parent().data('field');
      const value = $(this).data('value');
      $(this).parent().data('selected', value);
    });

    $(document).on("click", ".submit-review", function (e) {
      e.preventDefault();


      const Review = {
        Orderid: parseInt($('#RevieworderId').val()),
        Foodrating: $('[data-field="foodRating"]').data('selected') || 0,
        Servicerating: $('[data-field="serviceRating"]').data('selected') || 0,
        Ambiencerating: $('[data-field="ambienceRating"]').data('selected') || 0,
        Comments: $('#comment').val() || ''
      };

      $.ajax({
        url: '/MenuOrderApp/Review',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(Review),
        success: function (response) {
          if (response.success) {
            toastr.success(response.message);
            $('#reviewModal').modal('hide');
            window.location.href = `/TableOrderApp/TablesOrder`;
          }
          else {
            toastr.error(response.message);
          }
        },
        error: function () {
          alert("Error submitting review.");
        }
      });


    });



    @* customer Details get *@

      $(document).on("click", ".customer-details-button", function (e) {
        e.preventDefault();
        var Orderid = $(this).data("orderid");

        $.ajax({
          url: "/MenuOrderApp/CustomerDetail",
          type: "GET",
          data: { id: Orderid },
          success: function (data) {
            $(".customer-detail-partial").html(data);
            $("#CustomerDetails").modal("show");
          },
          error: function () {
            alert("failed to reload modal");
          }
        });

      });



    @* Customerdetails Yes Button *@

      $(document).on("click", ".cd-yes-btn", function (e) {
        e.preventDefault();

        // Trigger the client-side validation first
        if ($("#cd-form").valid()) {
          var formData = new FormData($("#cd-form")[0]);


          $.ajax({
            url: "/MenuOrderApp/CustomerDetailPost",
            type: "POST",
            data: formData,
            processData: false,
            contentType: false,
            dataType: 'json',
            success: function (response) {
              if (response.success) {
                // Reset the form and close the modal if successful
                $("#cd-form")[0].reset();
                $("#CustomerDetails").modal("hide");
                toastr.success(response.message);
              }
              else {
                toastr.error(response.message);
              }
            },
            error: function (error) {
              console.error("Error in Create Token.", error);
              toastr.error("Internal server error");
            }
          });
        }

      });


    @* generate Invoice *@

      $(document).on("click", ".generate-invoice", function (e) {
        e.preventDefault();
        var orderId = $(this).data("orderid");
        GeneratePdf(orderId);
      });


    function GeneratePdf(orderId) {
      $.ajax({
        url: "/Orders/orderInvoice",
        type: "GET",
        data: { id: orderId },
        success: function (response) {
          var iframe = document.createElement('iframe');
          iframe.style.position = 'absolute';
          iframe.style.left = '-9999px';
          iframe.style.width = '800px';
          iframe.style.height = 'auto';
          document.body.appendChild(iframe);

          // Write the response HTML into the iframe
          var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
          iframeDoc.open();
          iframeDoc.write(response);
          iframeDoc.close();

          iframe.onload = function () {
            html2canvas(iframe.contentWindow.document.body, { scale: 2 }).then(canvas => {
              const imgData = canvas.toDataURL('image/png');
              const { jsPDF } = window.jspdf;
              const doc = new jsPDF('p', 'mm', 'a4');
              const pageWidth = 210;
              const pageHeight = 297;
              const imgWidth = pageWidth;
              const imgHeight = (canvas.height * imgWidth) / canvas.width;
              let heightLeft = imgHeight;
              let position = 0;

              doc.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
              heightLeft -= pageHeight;

              while (heightLeft > 0) {
                position -= pageHeight;
                doc.addPage();
                doc.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                heightLeft -= pageHeight;
              }

              doc.save(`invoice_${orderId}.pdf`);

              // Remove the iframe after generating the PDF
              document.body.removeChild(iframe);
            });
          };

        },
        error: function () {
          alert("Failed to load invoice.");
        }
      });


    }

    @* scan QR Code *@
      $(document).on("click", ".scanner", function (e) {
        e.preventDefault();
        var orderId = $(this).data("orderid");

        $.ajax({
          url: "/MenuOrderApp/GenerateQRCode",
          type: 'GET',
          data: { orderId: orderId },
          xhrFields: {
            responseType: 'arraybuffer'  // Important: get raw bytes
          },
          success: function (data) {
            var base64 = btoa(
              new Uint8Array(data)
                .reduce((data, byte) => data + String.fromCharCode(byte), '')
            );

            var imageUrl = "data:image/png;base64," + base64;

            $("#qrImage").attr("src", imageUrl);
            $("#Sacenner").modal("show");
          },
          error: function (xhr, status, error) {
            console.error('Error fetching waiting token:', error);
          }
        });

      });




  });
</script>
