@using Newtonsoft.Json
@{

  Layout = "~/Views/Shared/_OrderAppLayout.cshtml";
  var orderId = Context.Request.Query["orderId"];
}



<link rel="stylesheet" href="~/css/OrderMenu.css" />

<div class="offcanvas-lg offcanvas-start" tabindex="-1" id="categoryList" aria-labelledby="categoryList">
  <div class="categoryList">

  </div>
</div>

<div class="d-flex flex-column flex-lg-row gap-4 w-100">

  <div class="main-content w-100">
    <div class="d-block d-md-flex flex-md-row justify-content-between mb-3">
      <div class="d-flex align-items-center justify-content-start">
        <button class="btn d-lg-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#categoryList"
          aria-controls="categoryList">
          <i class="fs-3 bi bi-list"></i>
        </button>

        <div class="search-field position-relative">
          <input class="search form-control me-2 border-0" type="search" placeholder="Search" id="searchInput"
            aria-label="Search">
          <i class="bi bi-search custom-icon"></i>
        </div>
      </div>

      <div class="d-flex gap-3 justify-content-center justify-content-sm-end flex-sm-nowrap flex-wrap">
        <div class="d-flex flex-row  align-items-center">
          <span class="dot me-2" style="background-color: green;border-color: green"></span>
          <span>Vegetarian</span>
        </div>
        <div class="d-flex flex-row align-items-center">
          <span class="dot me-2" style="background-color: red;border:4px solid red "></span>
          <span>Non-Vegetarian</span>
        </div>
        <div class="d-flex flex-row align-items-center">
          <span class="dot me-2" style="background-color: orange;border-color: orange;"></span>
          <span>Vegan</span>
        </div>
      </div>

    </div>

    <div class="d-flex flex-wrap  justify-content-lg-start justify-content-center  w-100 gap-4 item-list">

    </div>
  </div>

  @if (!string.IsNullOrEmpty(orderId))
  {
    <div class="order-details-partial card bg-white p-3 w-100" style="height:100%;">
    </div>
  }

</div>

<div class="modifier-list"></div>

<script>

  var GCatId = "";
  let OrderItem = [];
  let selectedModifiers = {};

  function renderOrderItems() {
    console.log(OrderItem);
    $("#order-items-container").empty();

    OrderItem.forEach((item, index) => {
      let modifierList = "";

      if (Array.isArray(item.Modifiers)) {
        modifierList = item.Modifiers.map(m =>
          `<li>${m.Modifiername}   ₹${m.Rate}</li>`
        ).join("");
      }

      const modifiersTotalPrice = item.Modifiers?.reduce((total, modifier) => total + modifier.Rate, 0) * item.Quantity;

      const itemHtml = `
            <div class="rounded border mb-2">
                <div class="d-flex">
                    <div class="accordion d-flex flex-column justify-content-start gap-2 p-2 w-50">
                        <button class="accordion-button collapsed p-2 bg-transparent border-0"
                                type="button"
                                data-bs-toggle="collapse"
                                data-bs-target="#collapse-${index}"
                                aria-expanded="false"
                                aria-controls="collapse-${index}">
                        <strong class="ps-1">${item.Itemname}</strong>
                        </button>
                        <div id="collapse-${index}" class="accordion-collapse collapse ">
                            <div class="ps-3">
                                <ul class="">
                                    ${modifierList}
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-around align-items-center flex-row w-50">
                        <div class="d-flex align-items-center border rounded px-2 py-1">
                            <i class="bi bi-dash cursor-pointer" onclick="updateQuantity(${index}, -1)"></i>
                            <span class="mx-2">${item.Quantity}</span>
                            <i class="bi bi-plus cursor-pointer" onclick="updateQuantity(${index}, 1)"></i>
                        </div>
                        <div class="text-center">
                            <div class="fw-bold">₹${item.Rate * item.Quantity}</div>
                            <div class="text-muted small">₹${modifiersTotalPrice}</div>
                        </div>
                        <i class="bi bi-trash text-muted fs-6 cursor-pointer" onclick="removeItem(${index})"></i>
                    </div>
                </div>
            </div>
        `;

      $("#order-items-container").append(itemHtml);
    });
    @* calculateTotals(); *@
    }

  @* load Category details *@
    function loadCategoryList() {
      $.ajax({

        url: "/MenuOrderApp/CategoryList",
        type: "GET",
        success: function (data) {
          $('.categoryList').html(data);
          $(`.category`).removeClass('active');
          $(`.category[data-catid="${GCatId}"]`).addClass('active');
        },
        error: function () {
          alert("error in load Item.")
        }
      });
    }


  @* load item table *@
    function loadItemList(catid) {
      GCatId = catid;
      let search = $("#searchInput").val();

      $.ajax({

        url: "/MenuOrderApp/ItemList",
        type: "GET",
        data: { id: catid, search: search },
        success: function (data) {
          $('.item-list').html(data);
          loadCategoryList();
        },
        error: function () {
          alert("error in load category.")
        }
      });
    }

  @* load item table *@
    function loadOrderDetails() {

      const Id = new URLSearchParams(window.location.search).get('orderId');
      const orderId = parseInt(Id)

      $.ajax({
        url: "/MenuOrderApp/OrderDetails",
        type: "GET",
        data: { id: orderId },
        success: function (data) {
          $('.order-details-partial').html(data);
        },
        error: function () {
          alert("error in load category.")
        }
      });
    }

  function searchcross() {
    let search = $("#searchInput").val();
    if (search === "") {
      var element = $(".custom-icon");
      element.removeClass("d-none");
    }
  }

  // Function to check if the modifiers are the same
  function isSameModifiers(modifiersA, modifiersB) {
    // Flatten the arrays of modifiers
    const flatModifiersA = modifiersA.map(modifier => JSON.stringify(modifier)); // Convert objects to JSON string
    const flatModifiersB = modifiersB.map(modifier => JSON.stringify(modifier)); // Convert objects to JSON string

    // Sort both arrays to ensure consistent order
    flatModifiersA.sort();
    flatModifiersB.sort();

    // Compare the sorted arrays
    return JSON.stringify(flatModifiersA) === JSON.stringify(flatModifiersB);
  }

  function updateQuantity(index, change) {
    OrderItem[index].Quantity += change;
    if (OrderItem[index].Quantity <= 0) {
      OrderItem.splice(index, 1);
    }
    renderOrderItems();
  }

  function removeItem(index) {
    OrderItem.splice(index, 1);
    renderOrderItems();
  }



  $(document).ready(function () {

    loadCategoryList();
    loadItemList(0);
    loadOrderDetails();

    @* load items onlick *@
      $(document).on("click", ".category", function (e) {
        e.preventDefault();
        var categoryId = $(this).data("catid");
        loadItemList(categoryId);
      });

    @* search from itenms *@
      let searchTimer;
    $("#searchInput").on("input", function () {
      var element = $(".custom-icon");
      element.addClass("d-none");
      clearTimeout(searchTimer);
      searchTimer = setTimeout(function () {
        loadItemList(GCatId);
        // Reset to page 1 when searching
      }, 500); // 500ms delay to avoid excessive requests
      searchcross();
    });



    @* add into Favourite *@
      $(document).on("click", ".Favourite", function (e) {
        e.stopPropagation();
        var itemId = $(this).data("itemid");

        $.ajax({
          url: '/MenuOrderApp/ToggleFavourite',
          type: 'POST',
          data: { id: itemId },
          success: function (isFavourite) {
            if (isFavourite.isFavourite == true) {
              loadItemList(-1);
              toastr.success("Item Added in Favourite.")
            } else {
              loadItemList(-1);
              toastr.error("Item Remove From the Favourite.")
            }
          },
          error: function () {
            alert("Error toggling favourite status.");
          }
        });
      });



    $(document).on("click", ".itemCard", function (e) {
      e.preventDefault();

      const orderId = new URLSearchParams(window.location.search).get('orderId');

      var itemId = $(this).data("item-id");
      const itemName = $(this).data("item-name");
      const itemPrice = parseFloat($(this).data("item-price"));

      selectedModifiers = {};


      $.ajax({
        url: `/MenuOrderApp/ModifierList?orderId=${orderId}`,
        type: "GET",
        data: { id: itemId },
        success: function (data) {
          if (data.success === false) {
            // Check if item without modifiers already exists
            const itemExists = OrderItem.find(item => item.Itemid === itemId && (!item.Modifiers || item.Modifiers.length === 0));

            if (itemExists) {
              // Increase quantity if already exists
              const index = OrderItem.findIndex(item => item.Itemid === itemId && (!item.Modifiers || item.Modifiers.length === 0));
              OrderItem[index].Quantity += 1;
            } else {
              // Add new item to cart
              const tempUniqueId = itemId + '_' + Date.now();
              OrderItem.push({
                uniqueId: tempUniqueId,
                Itemid: itemId,
                Itemname: itemName,
                Rate: itemPrice,
                ReadyQuantity = ReadyQuantity,
                Quantity: 1
              });
            }
            renderOrderItems();

          }
          else {
            $('.modifier-list').html(data);
            // Store current uniqueId in modal
            $("#modifierData").data("item-id", itemId);
            $("#modifierData").data("item-name", itemName);
            $("#modifierData").data("item-price", itemPrice);
            $("#modifierData").modal("show");
          }
        },
        error: function () {
          alert("error in load category.")
        }
      });


    });


    $(document).on("click", ".modifier-card", function () {

      var $card = $(this);
      var modifierGroupId = $card.closest(".modifier-group").data("groupid");
      var modifierId = $card.data("modifierid");

      var maxSelection = parseInt($card.closest(".modifier-group").data("maxselection")) || Infinity;

      if (!selectedModifiers[modifierGroupId]) {
        selectedModifiers[modifierGroupId] = [];
      }

      var currentSelections = selectedModifiers[modifierGroupId];
      var isSelected = $card.hasClass("selected");

      if (isSelected) {
        selectedModifiers[modifierGroupId] = currentSelections.filter(id => id !== modifierId);
        $card.removeClass("selected");

      } else {
        if (currentSelections.length >= maxSelection) {
          toastr.warning("You can select a maximum of " + maxSelection + " modifiers for this group.");
          return;
        }
        selectedModifiers[modifierGroupId].push(modifierId);
        $card.addClass("selected");
      }
    });

    $(document).on("click", "#add-button", function () {
      console.log("in add button");
      var allValid = true;


      $(".modifier-group").each(function () {
        var $group = $(this);
        var groupId = $group.data("groupid");
        var minSelection = parseInt($group.data("minselection")) || 0;
        var selected = selectedModifiers[groupId] || [];

        if (selected.length < minSelection) {
          toastr.warning("Group " + groupId + ": You must select at least " + minSelection + " modifier(s).");
          allValid = false;
        }
      });

      if (allValid) {
        // Proceed to add item to cart or next step
        console.log("All validations passed!");

        // Get item details from modal or clicked item
        const itemId = $("#modifierData").data("item-id");
        const itemName = $("#modifierData").data("item-name");
        const itemPrice = parseFloat($("#modifierData").data("item-price"));
        let flatModifiers = [];

        $(".modifier-card.selected").each(function () {
          flatModifiers.push({
            Modifierid: $(this).data("modifierid"),
            Modifiername: $(this).data("modifiername"),
            Rate: parseFloat($(this).data("rate"))
          });
        });


        // Check if item is already in cart by uniqueId
        const itemExists = OrderItem.find(item => item.Itemid === itemId && isSameModifiers(item.Modifiers, flatModifiers));

        if (itemExists) {
          // If item already exists, update its quantity
          const index = OrderItem.findIndex(i => i.Itemid === itemId && isSameModifiers(i.Modifiers, flatModifiers));
          OrderItem[index].Quantity += 1;
        } else {
          // Add new item to cart with quantity 1
          const tempUniqueId = itemId + '_' + Date.now(); // only for internal usage/display

          OrderItem.push({
            uniqueId: tempUniqueId,
            Itemid: itemId,
            Itemname: itemName,
            Rate: itemPrice,
            Modifiers: flatModifiers,
            ReadyQuantity: ReadyQuantity,
            Quantity: 1  // Initial quantity set to 1
          });

        }
        $("#modifierData").modal("hide");
        console.log(OrderItem);
        renderOrderItems();
      }
    });




    @* function calculateTotals() {
      let subTotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);
      let tax = subTotal * 0.05; // example 5% tax
      let total = subTotal + tax;

      $(".subtotal").text(`₹${subTotal.toFixed(2)}`);
      $(".taxamount").text(`₹${tax.toFixed(2)}`);
      $(".totalamount").text(`₹${total.toFixed(2)}`);
    } *@



     
  });
</script>
