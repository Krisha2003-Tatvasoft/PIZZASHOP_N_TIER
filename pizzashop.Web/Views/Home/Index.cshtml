@{
    ViewData["Title"] = "Dashboard Page";
}

<link rel="stylesheet" href="~/css/Menu.css" />

<div class="container-fluid main-content px-5 mt-50px">

    <div class="mb-2 d-flex justify-content-between align-items-md-center flex-md-row flex-column">
        <div class="heading-text py-2">
            <h1><b>Dashboard</b></h1>
        </div>

        <div class="pt-3">
            <div class="form-floating" style="height:60px">
                <select class="form-select form-control" id="time-main-filter"
                    aria-label="Floating label select example">
                    <option selected value="all">All Time</option>
                    <option value="today">Today</option>
                    <option value="7">Last 7 Days</option>
                    <option value="30">Last 30 Days</option>
                    <option value="currentMonth">Current Month</option>
                    <option value="customdate">Custom Date</option>
                    <option value="0" class="d-none">Custom Date</option>
                </select>
                <label>Duration</label>
            </div>
        </div>
    </div>

    <div class="dashboard-partial"></div>

</div>

<div class="modal fade modal-delete" id="customDateModal" tabindex="-1" aria-labelledby="deleteModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="customDateModal">Select Data Range</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex gap-2 flex-row align-items-center justify-content-center">
                <div class="form-floating w-50">
                    <input type="date" class="form-control" id="FromDate" max="" placeholder="fromDate">
                    <label for="fromDate">From Date</label>
                </div>

                <div class="form-floating w-50">
                    <input type="date" class="form-control" id="ToDate" max="" placeholder="ToDate">
                    <label for="ToDate">To Date</label>
                </div>
            </div>

            <div class="modal-footer d-flex justify-content-center gap-2">
                <a id="serachDate">
                    <button type="button" class="search-btn" style="background: #087cc4; color:white; 
                    border:1px solid #087cc4; border-radius: 5px;">Submit</button>
                </a>
                <button type="button" class="clear-btn" data-bs-dismiss="modal" style="background: white; 
                color:#087cc4; border:1px solid #087cc4; border-radius: 5px;">Cancel</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>

    let GDFromDate;
    let GDToDate;
    let revenueChartInstance;
    let customerChartInstance;
    let lastSelectedFilter = null;


    function formatDate(date) {
        return date.toISOString().split("T")[0];
    }

  function renderChart({ canvasId, data, valueKey, label, borderColor, backgroundColor, maxLabels = 12 }) {
    const ctx = document.getElementById(canvasId).getContext('2d');
    if (window[`${canvasId}Instance`]) window[`${canvasId}Instance`].destroy();

    data.forEach(d => d.date = new Date(d.date));
    let dateFilter = $('#time-main-filter').val();

    let mode;
    if (!GDFromDate || !GDToDate || dateFilter === "all") {
        const times = data.map(d => d.date.getTime());
        const minD = new Date(Math.min(...times));
        const maxD = new Date(Math.max(...times));
        const sameDay = minD.toDateString() === maxD.toDateString();
        const sameMonth = minD.getFullYear() === maxD.getFullYear() && minD.getMonth() === maxD.getMonth();
        const sameYear = minD.getFullYear() === maxD.getFullYear();
        if (sameDay) mode = 'hour';
        else if (sameMonth) mode = 'day';
        else if (sameYear) mode = 'month';
        else mode = 'monthYear';
    } else {
        const from = new Date(GDFromDate), to = new Date(GDToDate);
        const sameDay = from.toDateString() === to.toDateString();
        const sameMonth = from.getFullYear() === to.getFullYear() && from.getMonth() === to.getMonth();
        const sameYear = from.getFullYear() === to.getFullYear();
        if (dateFilter === "today") mode = 'hour';
        else if (dateFilter === "7" || dateFilter === "30" || dateFilter === "currentMonth") mode = 'day';
        else {
            if (sameDay) mode = 'hour';
            else if (sameMonth) mode = 'day';
            else if (sameYear) mode = 'month';
            else mode = 'monthYear';
        }
    }

    let labels = [], grouped = {}, dateMap = {};
    const M = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

    if (mode === 'hour') {
        for (let h = 0; h < 24; h++) {
            labels.push(`${h}:00`);
            grouped[h] = 0;
        }
        data.forEach(d => grouped[d.date.getHours()] += d[valueKey]);
    } else if (mode === 'day') {
        let from = dateFilter === "currentMonth"
            ? new Date(new Date().getFullYear(), new Date().getMonth(), 1)
            : new Date(GDFromDate);
        let to = dateFilter === "currentMonth"
            ? new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0)
            : new Date(GDToDate);
        for (let dt = new Date(from); dt <= to; dt.setDate(dt.getDate() + 1)) {
            const dateStr = dt.toISOString().split('T')[0];
            grouped[dateStr] = 0;
            dateMap[dateStr] = `${dt.getDate().toString().padStart(2, '0')}-${(dt.getMonth() + 1).toString().padStart(2, '0')}`;
        }
        data.forEach(d => {
            const dateStr = d.date.toISOString().split('T')[0];
            if (grouped.hasOwnProperty(dateStr)) grouped[dateStr] += d[valueKey];
        });
    } else {
        let from = GDFromDate ? new Date(GDFromDate) : new Date(Math.min(...data.map(d => d.date.getTime())));
        let to = GDToDate ? new Date(GDToDate) : new Date(Math.max(...data.map(d => d.date.getTime())));
        const start = new Date(from.getFullYear(), from.getMonth(), 1);
        const end = new Date(to.getFullYear(), to.getMonth() + 1, 0);
        for (let dt = new Date(start); dt <= end; dt.setMonth(dt.getMonth() + 1)) {
            const key = `${dt.getFullYear()}-${dt.getMonth()}`;
            grouped[key] = 0;
            dateMap[key] = `${M[dt.getMonth()]} ${dt.getFullYear()}`;
        }
        data.forEach(d => {
            const key = `${d.date.getFullYear()}-${d.date.getMonth()}`;
            if (grouped.hasOwnProperty(key)) grouped[key] += d[valueKey];
        });
    }

    const sortedKeys = Object.keys(grouped).sort((a, b) => {
        if (mode === 'day') return a.localeCompare(b);
        const [y1, m1] = a.split('-').map(Number), [y2, m2] = b.split('-').map(Number);
        return y1 !== y2 ? y1 - y2 : m1 - m2;
    });

    labels = mode === 'hour' ? labels : sortedKeys.map(k => dateMap[k] || k);
    const values = sortedKeys.map(k => grouped[k] || 0);

    // Calculate dynamic interval
    const interval = labels.length > maxLabels ? Math.ceil(labels.length / maxLabels) : 1;

    window[`${canvasId}Instance`] = new Chart(ctx, {
        type: 'line',
        data: {
            labels,
            datasets: [{
                label,
                data: values,
                borderColor,
                backgroundColor,
                tension: 0.4,
                fill: true,
                pointRadius: 2
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    ticks: {
                        color: '#555',
                        callback: function(value, index) {
                            return index % interval === 0 ? this.getLabelForValue(value) : '';
                        }
                    },
                    grid: { display: false }
                },
                y: {
                    beginAtZero: true,
                    ticks: { color: '#555' },
                    grid: { color: '#eee' }
                }
            },
            plugins: {
                legend: { labels: { color: '#444' } }
            }
        }
    });
}

    $(document).ready(function () {

        const today = new Date();
        const maxDate = formatDate(today);

        // Set max date to today for both inputs
        $("#FromDate").attr("max", maxDate);
        $("#ToDate").attr("max", maxDate);

        // When FromDate changes
        $("#FromDate").on("change", function () {
            const fromDate = $(this).val();
            $("#ToDate").attr("min", fromDate); // To date must be on/after From date
        });

        // When ToDate changes
        $("#ToDate").on("change", function () {
            const toDate = $(this).val();
            $("#FromDate").attr("max", toDate); // From date must be on/before To date
        });

        $('#customDateModal').on('show.bs.modal', function () {
            // Set max date to today for both inputs
            $("#FromDate").attr("max", maxDate);
            $("#ToDate").attr("max", maxDate).removeAttr("min");
        });


        loadDashboard();



        function loadDashboard() {

            $.ajax({
                url: "/Home/Dashboard",
                type: "GET",
                data: {
                    fromDate: GDFromDate,
                    toDate: GDToDate
                },
                success: function (data) {
                    $(".dashboard-partial").html(data);
                },
                error: function () {
                    alert("Failed to load data.");
                }
            });
        }



        $("#time-main-filter").on("change", function () {

            $("#FromDate").val("");
            $("#ToDate").val("");

            let dateFilter = $(this).val();

            let fromDate = null;
            let toDate = null; // Set to null for "All" option

            let today = new Date();


            if (dateFilter === "7") {
                fromDate = new Date(today);
                fromDate.setDate(today.getDate() - 7);
                toDate = today;
            } else if (dateFilter === "30") {
                fromDate = new Date(today);
                fromDate.setDate(today.getDate() - 30);
                toDate = today;
            } else if (dateFilter === "currentMonth") {
                fromDate = new Date(Date.UTC(today.getFullYear(), today.getMonth(), 1)); // First day of the current month
                toDate = today;
            } else if (dateFilter === "today") {// Today
                fromDate = today;
                toDate = today;
            }
            else if (dateFilter === "customdate") {// Custom Date: Open modal
                $("#customDateModal").modal("show");
                $("#time-main-filter").val("0");
                return;// Stop execution here
            }

            // Convert dates to YYYY-MM-DD format for PostgreSQL
            fromDate = fromDate ? fromDate.toISOString().slice(0, 19).replace("T", " ") : null;
            toDate = toDate ? toDate.toISOString().slice(0, 19).replace("T", " ") : null;

            GDFromDate = fromDate;
            GDToDate = toDate;

            loadDashboard();

        });

        $("#serachDate").on("click", function () {
            if ($("#FromDate").val() > $("#ToDate").val()) {
                toastr.error("To date should be greater than from date");
                return;
            }
            else {
                GDFromDate = $("#FromDate").val();
                GDToDate = $("#ToDate").val();
                loadDashboard();
                $("#customDateModal").modal("hide");
            }
        });




    });

</script>