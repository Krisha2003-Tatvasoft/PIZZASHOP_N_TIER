@model List<pizzashop.Entity.ViewModels.RolePermission>

<link rel="stylesheet" href="~/css/permission.css" />

<!-- heading text -->

<div class="w-100">
    <div class="heading-text py-2">
        <h1><b>Permission</b></h1>
    </div>
</div>



<div class="w-100 table-responsive pemission-content shadow">

    <div class="w-25">
        <div class="form-floating">
            <div class="form-floating mb-3 red-border">
                <input type="text" class="form-control" id="floatingInput" placeholder="Focus"
                    value="@Model[0].Rolename" disabled>
                <label for="floatingInput">Role</label>
            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table">

            <thead>
                <tr>
                    <th>
                        <div class="form-check ps-4">

                            <input class="form-check-input css-checkbox" type="checkbox" value=""
                                id="permissions-checkbox">
                            <label class="form-check-label" for="permissions-checkbox">
                                Permission
                            </label>
                        </div>
                    </th>
                    <th>Can View</th>
                    <th>Can Add/Edit</th>
                    <th>Can Delete</th>
                </tr>
            </thead>


            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            <input type="hidden" class="permission-id" value="@item.Permissionid">

                            <div class="form-check">
                                @{
                                  bool isRowChecked = (item.Canview  || item.Canaddedit || item.Candelete );
                                }
                                
                                <input class="form-check-input row-checkbox" type="checkbox"  @(isRowChecked ?
                                "checked" : "") id="category-@item.Permissionid" >
                                <label class="form-check-label" for="category-@item.Permissionid">
                                    @item.Permissionname
                                </label>
                            </div>
                        </td>
                        <td>
                            <div class="form-check form-switch">
                                <input class="form-check-input can-view" type="checkbox" role="switch"
                                    id="view-@item.Permissionid" @(item.Canview ? "checked" : "")>
                            </div>
                        </td>
                        <td>
                            <div class="form-check form-switch">
                                <input class="form-check-input can-add-edit" type="checkbox" role="switch"
                                    id="edit-@item.Permissionid" @(item.Canaddedit ? "checked" : "")>
                            </div>
                        </td>
                        <td>
                            <div class="form-check form-switch">
                                <input class="form-check-input can-delete" type="checkbox" role="switch"
                                    id="delete-@item.Permissionid" @(item.Candelete ? "checked" : "")>
                            </div>
                        </td>
                    </tr>
                }

            </tbody>
        </table>

    </div>

    <div class="save-cancle-button">

        <a class="save-btn">
            <button class="save-button" type="submit">Save</button>
        </a>

        <a class="cancle-btn ">
            <button class="cancel-button">
                Cancel
            </button> </a>
    </div>

</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {

        $(document).on("click", ".cancle-btn", function () {
            $.ajax({
                url: '@Url.Action("Role", "RolePermission")',
                type: 'GET',
                success: function (response) {

                    $('#roletable').show();
                    $('#permissionpartial').hide();
                },
                error: function () {
                    console.error("Error occurred while loading permissionpartial view!");
                }
            });
        });

      
        $(document).on("click", ".save-btn", function () {
            let updatedPermissions = [];

            $("tbody tr").each(function () {
                let row = $(this);
                let permissionId = row.find(".permission-id").val();
                let IsCheck = $("#category-" + permissionId).prop("checked");

                let canView = row.find(".can-view").prop("checked");
                let canAddEdit = row.find(".can-add-edit").prop("checked");
                let canDelete = row.find(".can-delete").prop("checked");



                updatedPermissions.push({
                    Permissionid: permissionId,
                    Canview: canView,
                    Canaddedit: canAddEdit,
                    Candelete: canDelete,
                    CanPermission: IsCheck
                });

            });


            $.ajax({
                url: "/RolePermission/UpdatePermissions",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(updatedPermissions),
                success: function (response) {
                    $('#permissionpartial').hide();
                    $('#roletable').show();
                    toastr.success("Permission Updated sucessfully.");
                    console.success("Permission updated sucessfully", sucess);
                },
                error: function (error) {
                    console.error("Error updating permissions:", error);
                }
            });
        });

        updateMasterCheckbox();


        // Trigger change event on row checkboxes to set initial state of permission toggles
        $(".row-checkbox").trigger("change");

        // Master checkbox (Select All) behavior
        $("#permissions-checkbox").on("change", function () {
            let isChecked = $(this).prop("checked");
            $(".row-checkbox").prop("checked", isChecked).trigger("change");
            updateMasterCheckbox();
        });


        // Row checkbox behavior
        $(document).on("change", ".row-checkbox", function () {
            let row = $(this).closest("tr");
            let isChecked = $(this).prop("checked");

            // Enable/disable permission toggles based on checkbox state
            row.find(".form-check-input[role='switch']").prop("disabled", !isChecked);

            // If row is unchecked, uncheck all permission toggles
            if (!isChecked) {
                row.find(".form-check-input[role='switch']").prop("checked", false);
            }

            // Update master checkbox state
            updateMasterCheckbox();
        });

        // Permission toggle dependency handling
        $(document).on("change", ".form-check-input[role='switch']", function () {
             $(".row-checkbox").trigger("change");
            let row = $(this).closest("tr");
            let permissionId = row.find(".permission-id").val();
            let viewToggle = row.find("#view-" + permissionId);
            let editToggle = row.find("#edit-" + permissionId);
            let deleteToggle = row.find("#delete-" + permissionId);


            if ($(this).is(viewToggle) && !viewToggle.prop("checked")) {
        editToggle.prop("checked", false);
        deleteToggle.prop("checked", false);
    }

    // *2. If any of "Edit", "Add", or "Delete" is turned ON, turn ON "View"*
    if (!$(this).is(viewToggle) && (editToggle.prop("checked")  || deleteToggle.prop("checked"))) {
        viewToggle.prop("checked", true);
    }

        });
    // Function to update the master checkbox state (indeterminate/checked/unchecked)


    function updateMasterCheckbox() {
        let totalCheckboxes = $(".row-checkbox").length;
        let checkedCheckboxes = $(".row-checkbox:checked").length;

        let $masterCheckbox = $("#permissions-checkbox");

        if (checkedCheckboxes === 0) {
            // None checked - show unchecked (plus)
            $masterCheckbox.prop("checked", false);
            $masterCheckbox.prop("indeterminate", false);
            $("#permissionLbl").text("+");
        } else if (checkedCheckboxes === totalCheckboxes) {
            // All checked - show checked
            $masterCheckbox.prop("checked", true);
            $masterCheckbox.prop("indeterminate", false);
            $("#permissionLbl").text("âœ“");
        } else {
            // Some checked - show indeterminate (minus)
            $masterCheckbox.prop("indeterminate", true);
            $("#permissionLbl").text("-");
        }
    }


    });

</script>
